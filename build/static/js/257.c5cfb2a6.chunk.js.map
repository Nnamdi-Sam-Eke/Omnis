{"version":3,"file":"static/js/257.c5cfb2a6.chunk.js","mappings":"yMAKA,MAyGA,2BAzGoBA,KAClB,MAAM,YAAEC,IAAgBC,EAAAA,EAAAA,OACjBC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,KACxCK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,IAGvCO,EAAAA,EAAAA,YAAU,KACR,GAAgB,OAAXX,QAAW,IAAXA,IAAAA,EAAaY,IAEhB,YADAF,GAAW,GAIYG,WACvB,IACE,MAAMC,GAAIC,EAAAA,EAAAA,IACRC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,gBACfC,EAAAA,EAAAA,IAAQ,YAAa,SAGjBC,SADsBC,EAAAA,EAAAA,IAAQN,IACFO,KAAKC,KAAKC,IAAG,IAAAC,EAAA,MAAM,CACnDC,GAAIF,EAAIE,MACLF,EAAIG,OACPC,UAA+B,QAApBH,EAAAD,EAAIG,OAAOC,iBAAS,IAAAH,GAApBA,EAAsBI,QAC7B,IAAIC,KAAoC,IAA/BN,EAAIG,OAAOC,UAAUC,SAAgBE,iBAC9C,UACL,IACD3B,EAAegB,GACfT,GAAW,EACb,CAAE,MAAOqB,GACPC,QAAQD,MAAM,mCAA+BA,GAC7CrB,GAAW,EACb,GAGFuB,EAAkB,GACjB,CAACjC,IAGJ,MAAMkC,EAAkBhC,EAAYiC,QAAQC,GAC1CA,EAAKC,UAAUC,MAAMC,GAAaA,EAASC,cAAcC,SAASpC,EAAYmC,mBAchF,OAVA7B,EAAAA,EAAAA,YAAU,KACRH,EACEH,EACIH,EAAYwC,SAASN,GACnBA,EAAKC,UAAUF,QAAQI,GAAaA,EAASC,cAAcG,WAAWtC,EAAYmC,mBAEpF,GACL,GACA,CAACnC,EAAaH,KAGf0C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wHAAuHC,SAAA,EACpIC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,2EAA0EC,SAAC,yBAGzFC,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,YAAY,yBACZJ,UAAU,4FACVK,MAAO7C,EACP8C,SAAWC,GAAM9C,EAAe8C,EAAEC,OAAOH,SAE1C3C,EAAY+C,OAAS,IACpBP,EAAAA,EAAAA,KAAA,MAAIF,UAAU,8DAA6DC,SACxEvC,EAAYe,KAAI,CAACiC,EAAYC,KAC5BT,EAAAA,EAAAA,KAAA,MAAgBF,UAAU,uCAAuCY,QAASA,IAAMnD,EAAeiD,GAAYT,SACxGS,GADMC,OAQd/C,GACCsC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,+CAA8CC,SAAC,wBAE9DC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,SACvBZ,EAAgBoB,OAAS,EACxBpB,EAAgBZ,KAAKc,IACnBQ,EAAAA,EAAAA,MAAA,OAAmBC,UAAU,qDAAoDC,SAAA,EAC/EC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,+BAA8BC,SAAC,aAC5CC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gCAA+BC,SAAEV,EAAKsB,UACnDX,EAAAA,EAAAA,KAAA,KAAGF,UAAU,oCAAmCC,SAAC,gBACjDC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,kDAAiDC,SAC5DV,EAAKC,UAAUf,KAAI,CAACiB,EAAUiB,KAC7BT,EAAAA,EAAAA,KAAA,MAAAD,SAAiBP,GAARiB,QAGbT,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gDAA+CC,SAAEV,EAAKT,cAT3DS,EAAKX,OAajBmB,EAAAA,EAAAA,MAAA,KAAGC,UAAU,+CAA8CC,SAAA,CAAC,yBAAuBzC,EAAY,YAIjG,C","sources":["components/History.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { db } from '../firebase'; // Your Firebase config file\r\nimport { collection, getDocs, orderBy, query } from 'firebase/firestore';\r\nimport { useAuth } from '../AuthContext'; // Ensure authentication context\r\n\r\nconst ChatHistory = () => {\r\n  const { currentUser } = useAuth(); // Get logged-in user\r\n  const [chatHistory, setChatHistory] = useState([]); // Store the fetched history data\r\n  const [searchQuery, setSearchQuery] = useState(\"\"); // Manage search input\r\n  const [suggestions, setSuggestions] = useState([]); // Manage autocomplete suggestions\r\n  const [loading, setLoading] = useState(true); // Manage loading state\r\n\r\n  // Fetch chat history from Firestore based on the current user\r\n  useEffect(() => {\r\n    if (!currentUser?.uid) {\r\n      setLoading(false); // No need to fetch history if no user is found\r\n      return;\r\n    }\r\n\r\n    const fetchChatHistory = async () => {\r\n      try {\r\n        const q = query(\r\n          collection(db, 'chatHistory'),\r\n          orderBy('timestamp', 'desc')\r\n        );\r\n        const querySnapshot = await getDocs(q);\r\n        const historyData = querySnapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n          timestamp: doc.data().timestamp?.seconds\r\n            ? new Date(doc.data().timestamp.seconds * 1000).toLocaleString()\r\n            : 'Unknown',\r\n        }));\r\n        setChatHistory(historyData);\r\n        setLoading(false); // Set loading to false after data is fetched\r\n      } catch (error) {\r\n        console.error('❌ Error retrieving history:', error);\r\n        setLoading(false); // Set loading to false on error\r\n      }\r\n    };\r\n\r\n    fetchChatHistory();\r\n  }, [currentUser]); // Ensure this runs when currentUser changes\r\n\r\n  // Filter the history based on search query\r\n  const filteredHistory = chatHistory.filter((item) =>\r\n    item.scenarios.some((scenario) => scenario.toLowerCase().includes(searchQuery.toLowerCase()))\r\n  );\r\n\r\n  // Generate suggestions for autocomplete based on partial matches\r\n  useEffect(() => {\r\n    setSuggestions(\r\n      searchQuery\r\n        ? chatHistory.flatMap((item) =>\r\n            item.scenarios.filter((scenario) => scenario.toLowerCase().startsWith(searchQuery.toLowerCase()))\r\n          )\r\n        : []\r\n    );\r\n  }, [searchQuery, chatHistory]);\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto mt-8 p-8 bg-white dark:bg-gray-900 rounded-2xl shadow-lg hover:shadow-blue-500/50 rounded-lg border\">\r\n      <h1 className=\"text-2xl font-bold text-center p-6 text-blue-600 dark:text-blue-300 mb-4\">Interaction History</h1>\r\n\r\n      {/* Search bar with autocomplete */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search past queries...\"\r\n        className=\"w-full p-2 mb-4 border focus:ring-2 focus:ring-blue-500 rounded bg-white dark:bg-gray-700\"\r\n        value={searchQuery}\r\n        onChange={(e) => setSearchQuery(e.target.value)}\r\n      />\r\n      {suggestions.length > 0 && (\r\n        <ul className=\"bg-gray-100 border rounded-lg max-h-32 overflow-y-auto mb-4\">\r\n          {suggestions.map((suggestion, index) => (\r\n            <li key={index} className=\"p-2 hover:bg-gray-200 cursor-pointer\" onClick={() => setSearchQuery(suggestion)}>\r\n              {suggestion}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {/* Loading State */}\r\n      {loading ? (\r\n        <div className=\"text-center text-gray-500 dark:text-gray-400\">Loading history...</div>\r\n      ) : (\r\n        <div className=\"space-y-4\">\r\n          {filteredHistory.length > 0 ? (\r\n            filteredHistory.map((item) => (\r\n              <div key={item.id} className=\"p-4 bg-gray-100 dark:bg-gray-800 rounded-xl shadow\">\r\n                <p className=\"text-green-600 font-semibold\">Action:</p>\r\n                <p className=\"text-gray-900 dark:text-white\">{item.action}</p>\r\n                <p className=\"text-green-600 font-semibold mt-2\">Scenarios:</p>\r\n                <ul className=\"list-disc pl-5 text-gray-900 dark:text-gray-300\">\r\n                  {item.scenarios.map((scenario, index) => (\r\n                    <li key={index}>{scenario}</li>\r\n                  ))}\r\n                </ul>\r\n                <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-2\">{item.timestamp}</p>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p className=\"text-center text-gray-500 dark:text-gray-400\">No results found for \"{searchQuery}\".</p> // No result message\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatHistory;\r\n"],"names":["ChatHistory","currentUser","useAuth","chatHistory","setChatHistory","useState","searchQuery","setSearchQuery","suggestions","setSuggestions","loading","setLoading","useEffect","uid","async","q","query","collection","db","orderBy","historyData","getDocs","docs","map","doc","_doc$data$timestamp","id","data","timestamp","seconds","Date","toLocaleString","error","console","fetchChatHistory","filteredHistory","filter","item","scenarios","some","scenario","toLowerCase","includes","flatMap","startsWith","_jsxs","className","children","_jsx","type","placeholder","value","onChange","e","target","length","suggestion","index","onClick","action"],"sourceRoot":""}