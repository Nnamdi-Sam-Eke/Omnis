{"version":3,"file":"static/js/58.2cdf87f0.chunk.js","mappings":"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","sources":["../node_modules/react-chartjs-2/src/utils.ts","../node_modules/react-chartjs-2/src/chart.tsx","../node_modules/react-chartjs-2/src/typedCharts.tsx"],"sourcesContent":["import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS<TType, TData, TLabel> | null>(null);\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"],"names":["defaultDatasetIdKey","reforwardRef","ref","value","current","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","arguments","length","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","data","includes","push","Object","assign","cloneData","nextData","getDatasetAtEvent","chart","event","getElementsAtEventForMode","nativeEvent","intersect","getElementAtEvent","getElementsAtEvent","ChartComponent","props","height","width","redraw","type","options","plugins","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","Chart$1","destroyChart","destroy","useEffect","setOptions","nextOptions","config","setTimeout","update","React","role","Chart","forwardRef","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Radar","RadarController","Doughnut","DoughnutController","PolarArea","PolarAreaController","Bubble","BubbleController","Pie","PieController","Scatter","ScatterController"],"sourceRoot":""}