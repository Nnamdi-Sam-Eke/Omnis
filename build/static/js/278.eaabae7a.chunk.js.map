{"version":3,"file":"static/js/278.eaabae7a.chunk.js","mappings":"yMAKA,MA8FA,2BA9FuBA,KACrB,MAAM,YAAEC,IAAgBC,EAAAA,EAAAA,OACjBC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,KAG/CK,EAAAA,EAAAA,YAAU,KACkBC,WACxB,GAAe,OAAXV,QAAW,IAAXA,GAAAA,EAAaW,IACf,IACE,MAAMC,GAAIC,EAAAA,EAAAA,IAAMC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,kBAAkBC,EAAAA,EAAAA,IAAM,SAAU,KAAMhB,EAAYW,MAE7EM,SADsBC,EAAAA,EAAAA,IAAQN,IACTO,KAAKC,KAAKC,IAAG,CAAQC,GAAID,EAAIC,MAAOD,EAAIJ,WACnEd,EAAgBc,EAClB,CAAE,MAAOM,GACPC,QAAQD,MAAM,yCAAqCA,EACrD,CACF,EAGFE,EAAmB,GAClB,CAACzB,IAGJ,MAAM0B,EAAuBxB,EAAayB,QAAQC,GAChDA,EAAKf,MAAMgB,cAAcC,SAASzB,EAAYwB,iBAahD,OATApB,EAAAA,EAAAA,YAAU,KACRD,EACEH,EACI,IAAI,IAAI0B,IAAI7B,EAAakB,KAAKQ,GAASA,EAAKf,UACzCc,QAAQd,GAAUA,EAAMgB,cAAcG,WAAW3B,EAAYwB,iBAChE,GACL,GACA,CAACxB,EAAaH,KAGf+B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wHAAuHC,SAAA,EACpIC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,2EAA0EC,SAAC,mBAEzFC,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,YAAY,0BACZJ,UAAU,4FACVK,MAAOlC,EACPmC,SAAWC,GAAMnC,EAAemC,EAAEC,OAAOH,SAI1ChC,EAAYoC,OAAS,IACpBP,EAAAA,EAAAA,KAAA,MAAIF,UAAU,8DAA6DC,SACxE5B,EAAYa,KAAI,CAACwB,EAAYC,KAC5BT,EAAAA,EAAAA,KAAA,MAAgBF,UAAU,uCAAuCY,QAASA,IAAMxC,EAAesC,GAAYT,SACxGS,GADMC,QAQfT,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAE9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,SACN,IAAxBjC,EAAayC,QAEZP,EAAAA,EAAAA,KAAA,KAAGF,UAAU,+CAA8CC,SAAC,gCAC1B,IAAhCT,EAAqBiB,QAEvBV,EAAAA,EAAAA,MAAA,KAAGC,UAAU,+CAA8CC,SAAA,CAAC,kCAAgC9B,EAAY,QAGxGqB,EAAqBN,KAAKQ,IAAI,IAAAmB,EAAA,OAC5Bd,EAAAA,EAAAA,MAAA,OAAmBC,UAAU,qDAAoDC,SAAA,EAC/EC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,+BAA8BC,SAAC,YAC5CC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gCAA+BC,SAAEP,EAAKf,SACnDuB,EAAAA,EAAAA,KAAA,KAAGF,UAAU,oCAAmCC,SAAC,eACjDC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,mCAAkCC,SAAEP,EAAKoB,UAAY,0BAClEZ,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gDAA+CC,SAC3C,QAAdY,EAAAnB,EAAKqB,iBAAS,IAAAF,GAAdA,EAAgBG,QACb,IAAIC,KAA8B,IAAzBvB,EAAKqB,UAAUC,SAAgBE,iBACxC,6BARExB,EAAKN,GAUT,UAKV,C","sources":["components/Saved.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\r\nimport { db } from \"../firebase\";\r\nimport { useAuth } from \"../AuthContext\";\r\n\r\nconst SavedComponent = () => {\r\n  const { currentUser } = useAuth();\r\n  const [savedQueries, setSavedQueries] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [suggestions, setSuggestions] = useState([]);\r\n\r\n  // Fetch saved queries from Firestore\r\n  useEffect(() => {\r\n    const fetchSavedQueries = async () => {\r\n      if (currentUser?.uid) {\r\n        try {\r\n          const q = query(collection(db, \"saved_queries\"), where(\"userId\", \"==\", currentUser.uid));\r\n          const querySnapshot = await getDocs(q);\r\n          const data = querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\r\n          setSavedQueries(data);\r\n        } catch (error) {\r\n          console.error(\"❌ Error retrieving saved queries:\", error);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchSavedQueries();\r\n  }, [currentUser]);\r\n\r\n  // Filter saved queries based on the search query\r\n  const filteredSavedQueries = savedQueries.filter((item) =>\r\n    item.query.toLowerCase().includes(searchQuery.toLowerCase())\r\n  );\r\n\r\n  // Update suggestions based on the search query\r\n  useEffect(() => {\r\n    setSuggestions(\r\n      searchQuery\r\n        ? [...new Set(savedQueries.map((item) => item.query))] // Remove duplicates\r\n            .filter((query) => query.toLowerCase().startsWith(searchQuery.toLowerCase()))\r\n        : []\r\n    );\r\n  }, [searchQuery, savedQueries]);\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto mt-8 p-8 border bg-white dark:bg-gray-900 rounded-2xl shadow-lg hover:shadow-blue-500/50 rounded-lg\">\r\n      <h1 className=\"text-2xl font-bold text-center p-2 text-blue-600 dark:text-blue-300 mb-4\">Saved Queries</h1>\r\n\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search saved queries...\"\r\n        className=\"w-full p-2 mb-4 border focus:ring-2 focus:ring-blue-500 rounded bg-white dark:bg-gray-700\"\r\n        value={searchQuery}\r\n        onChange={(e) => setSearchQuery(e.target.value)}\r\n      />\r\n      \r\n      {/* Display search suggestions */}\r\n      {suggestions.length > 0 && (\r\n        <ul className=\"bg-gray-100 border rounded-lg max-h-32 overflow-y-auto mb-4\">\r\n          {suggestions.map((suggestion, index) => (\r\n            <li key={index} className=\"p-2 hover:bg-gray-200 cursor-pointer\" onClick={() => setSearchQuery(suggestion)}>\r\n              {suggestion}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {/* Flex container for horizontal layout */}\r\n      <div className=\"flex gap-8 mt-8\">\r\n        {/* Saved Queries Card */}\r\n        <div className=\"flex-1 space-y-4\">\r\n          {savedQueries.length === 0 ? (\r\n            // Show message if no saved queries at all\r\n            <p className=\"text-center text-gray-500 dark:text-gray-400\">No saved queries available.</p>\r\n          ) : filteredSavedQueries.length === 0 ? (\r\n            // Show message if no queries match the search\r\n            <p className=\"text-center text-gray-500 dark:text-gray-400\">No matching queries found for \"{searchQuery}\".</p>\r\n          ) : (\r\n            // Display saved queries\r\n            filteredSavedQueries.map((item) => (\r\n              <div key={item.id} className=\"p-4 bg-gray-100 dark:bg-gray-800 rounded-xl shadow\">\r\n                <p className=\"text-green-600 font-semibold\">Query:</p>\r\n                <p className=\"text-gray-900 dark:text-white\">{item.query}</p>\r\n                <p className=\"text-green-600 font-semibold mt-2\">Response:</p>\r\n                <p className=\"text-gray-900 dark:text-gray-300\">{item.response || \"No response recorded\"}</p>\r\n                <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-2\">\r\n                  {item.timestamp?.seconds\r\n                    ? new Date(item.timestamp.seconds * 1000).toLocaleString()\r\n                    : \"No timestamp available\"}\r\n                </p>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SavedComponent;\r\n"],"names":["SavedComponent","currentUser","useAuth","savedQueries","setSavedQueries","useState","searchQuery","setSearchQuery","suggestions","setSuggestions","useEffect","async","uid","q","query","collection","db","where","data","getDocs","docs","map","doc","id","error","console","fetchSavedQueries","filteredSavedQueries","filter","item","toLowerCase","includes","Set","startsWith","_jsxs","className","children","_jsx","type","placeholder","value","onChange","e","target","length","suggestion","index","onClick","_item$timestamp","response","timestamp","seconds","Date","toLocaleString"],"sourceRoot":""}