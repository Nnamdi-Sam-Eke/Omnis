{"version":3,"file":"static/js/984.1d9a80a4.chunk.js","mappings":"yMAIA,MAyGA,2BAzGoBA,IAA6B,IAA5B,cAAEC,EAAgB,IAAID,EACzC,MAAOE,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,KACpCG,EAAaC,IAAkBJ,EAAAA,EAAAA,WAAS,IAE/CK,EAAAA,EAAAA,YAAU,KACJR,EAAcS,OAAS,GAAsB,IAAjBR,EAAMQ,QACpCP,EAASF,EAAcU,KAAIC,IAAI,CAAOC,KAAMD,EAAME,WAAW,MAC/D,GACC,CAACb,EAAeC,IAuBnB,OACEa,EAAAA,EAAAA,MAAA,OAAKC,UAAU,6GAA4GC,SAAA,EACzHF,EAAAA,EAAAA,MAAA,OACEC,UAAU,mDACVE,QAASA,IAAMV,GAAgBD,GAAaU,SAAA,EAE5CE,EAAAA,EAAAA,KAAA,MAAIH,UAAU,yDAAwDC,SAAC,iBACtEV,GACQY,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CAACJ,UAAU,2CAExBG,EAAAA,EAAAA,KAACE,EAAAA,EAAS,CAACL,UAAU,8CAI9BT,IACAQ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBE,EAAAA,EAAAA,KAAA,MAAIH,UAAU,qCAAoCC,SAC/Cf,EAAMS,KAAI,CAACC,EAAMU,KAChBP,EAAAA,EAAAA,MAAA,MAEEC,UAAU,6EAA4EC,SAAA,EAEtFF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BC,SAAA,EAC1CE,EAAAA,EAAAA,KAAA,SACEI,KAAK,WACLC,QAASZ,EAAKE,UACdW,SAAUA,IApCEH,KAC5BnB,EAASD,EAAMS,KAAI,CAACC,EAAMc,IACxBA,IAAMJ,EAAQ,IAAKV,EAAME,WAAYF,EAAKE,WAAcF,IACxD,EAiC8Be,CAAqBL,GACrCN,UAAU,oBAEZG,EAAAA,EAAAA,KAAA,QAAMH,UAAWJ,EAAKE,UAAY,6BAA+B,GAAGG,SACjEL,EAAKC,WAGVM,EAAAA,EAAAA,KAAA,UACED,QAASA,IAhDLI,KAClBnB,EAASD,EAAM0B,QAAO,CAACC,EAAGH,IAAMA,IAAMJ,IAAO,EA+ChBQ,CAAWR,GAC1BN,UAAU,kCAAiCC,UAE3CE,EAAAA,EAAAA,KAACY,EAAAA,IAAQ,QAlBNT,QAwBXP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAClCE,EAAAA,EAAAA,KAAA,SACEI,KAAK,OACLS,MAAO3B,EACPoB,SAAWQ,GAAM3B,EAAa2B,EAAEC,OAAOF,OACvChB,UAAU,6DACVmB,YAAY,qBAEdhB,EAAAA,EAAAA,KAAA,UACED,QAzEIkB,KACW,KAArB/B,EAAUgC,SACZlC,EAAS,IAAID,EAAO,CAAEW,KAAMR,EAAWS,WAAW,KAClDR,EAAa,IACf,EAsEUU,UAAU,yDAAwDC,UAElEE,EAAAA,EAAAA,KAACmB,EAAAA,IAAM,SAIVpC,EAAMQ,OAAS,IACdS,EAAAA,EAAAA,KAAA,UACED,QAjEOqB,KACjBpC,EAAS,GAAG,EAiEFa,UAAU,0DAAyDC,SACpE,mBAMH,C","sources":["components/TaskList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { FiPlus, FiTrash2 } from \"react-icons/fi\";\r\nimport { ChevronRight, ChevronUp } from \"lucide-react\";\r\n\r\nconst TaskPlanner = ({ scenarioTasks = [] }) => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [inputTask, setInputTask] = useState(\"\");\r\n  const [isCollapsed, setIsCollapsed] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (scenarioTasks.length > 0 && tasks.length === 0) {\r\n      setTasks(scenarioTasks.map(task => ({ text: task, completed: false })));\r\n    }\r\n  }, [scenarioTasks, tasks]);\r\n\r\n  const addTask = () => {\r\n    if (inputTask.trim() !== \"\") {\r\n      setTasks([...tasks, { text: inputTask, completed: false }]);\r\n      setInputTask(\"\");\r\n    }\r\n  };\r\n\r\n  const removeTask = (index) => {\r\n    setTasks(tasks.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const toggleTaskCompletion = (index) => {\r\n    setTasks(tasks.map((task, i) => \r\n      i === index ? { ...task, completed: !task.completed } : task\r\n    ));\r\n  };\r\n\r\n  const clearTasks = () => {\r\n    setTasks([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white dark:bg-gray-800 hover:shadow-blue-500/50 transition px-6 py-6 rounded-2xl shadow-md mt-6  border\">\r\n      <div\r\n        className=\"flex justify-between items-center cursor-pointer\"\r\n        onClick={() => setIsCollapsed(!isCollapsed)}\r\n      >\r\n        <h3 className=\"text-xl font-semibold text-blue-500 dark:text-blue-300\">Task Planner</h3>\r\n        {isCollapsed ? (\r\n                 <ChevronRight className=\"w-5 h-5 text-blue-600 dark:text-white\" />\r\n               ) : (\r\n                 <ChevronUp className=\"w-5 h-5 text-blue-600 dark:text-white\" />\r\n               )}\r\n      </div>\r\n\r\n      {!isCollapsed && (\r\n        <div className=\"mt-4\">\r\n          <ol className=\"space-y-2 list-decimal list-inside\">\r\n            {tasks.map((task, index) => (\r\n              <li\r\n                key={index}\r\n                className=\"flex justify-between items-center p-2 bg-gray-100 dark:bg-gray-700 rounded\"\r\n              >\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={task.completed}\r\n                    onChange={() => toggleTaskCompletion(index)}\r\n                    className=\"cursor-pointer\"\r\n                  />\r\n                  <span className={task.completed ? \"line-through text-gray-500\" : \"\"}>\r\n                    {task.text}\r\n                  </span>\r\n                </div>\r\n                <button\r\n                  onClick={() => removeTask(index)}\r\n                  className=\"text-red-500 hover:text-red-700\"\r\n                >\r\n                  <FiTrash2 />\r\n                </button>\r\n              </li>\r\n            ))}\r\n          </ol>\r\n\r\n          <div className=\"flex space-x-2 mt-4\">\r\n            <input\r\n              type=\"text\"\r\n              value={inputTask}\r\n              onChange={(e) => setInputTask(e.target.value)}\r\n              className=\"flex-1 p-2 border rounded dark:bg-gray-700 dark:text-white\"\r\n              placeholder=\"Enter a task...\"\r\n            />\r\n            <button\r\n              onClick={addTask}\r\n              className=\"p-2 bg-green-600 text-white rounded hover:bg-green-700\"\r\n            >\r\n              <FiPlus />\r\n            </button>\r\n          </div>\r\n\r\n          {tasks.length > 0 && (\r\n            <button\r\n              onClick={clearTasks}\r\n              className=\"mt-4 p-2 bg-red-600 text-white rounded hover:bg-red-700\"\r\n            >\r\n              Clear All\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskPlanner;\r\n"],"names":["_ref","scenarioTasks","tasks","setTasks","useState","inputTask","setInputTask","isCollapsed","setIsCollapsed","useEffect","length","map","task","text","completed","_jsxs","className","children","onClick","_jsx","ChevronRight","ChevronUp","index","type","checked","onChange","i","toggleTaskCompletion","filter","_","removeTask","FiTrash2","value","e","target","placeholder","addTask","trim","FiPlus","clearTasks"],"sourceRoot":""}