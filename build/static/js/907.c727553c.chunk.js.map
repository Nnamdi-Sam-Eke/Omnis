{"version":3,"file":"static/js/907.c727553c.chunk.js","mappings":"gOAWe,SAASA,EAAaC,GAAkB,IAAjB,WAAEC,GAAYD,EAClD,MAAOE,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,CAAC,MACrCC,EAAQC,IAAaF,EAAAA,EAAAA,WAAS,IAC9BG,EAASC,IAAcJ,EAAAA,EAAAA,UAAS,KAChCK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,IACjC,OAAEO,EAAM,gBAAEC,IAAoBC,EAAAA,EAAAA,MAC7BC,EAAaC,IAAkBX,EAAAA,EAAAA,UAAS,KACzC,KAAEY,IAASC,EAAAA,EAAAA,MAEjBC,EAAAA,EAAAA,YAAU,KACJF,GACFG,GACF,GACC,CAACH,IAEJ,MAgBMG,EAAsBC,UAC1B,GAAKJ,EACL,IACE,MAAMK,GAAIC,EAAAA,EAAAA,IACRC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,QAASR,EAAKS,IAAK,WAClCC,EAAAA,EAAAA,IAAQ,YAAa,SAGjBC,SADsBC,EAAAA,EAAAA,IAAQP,IACDQ,KAAKC,KAAKC,GAAQA,EAAIC,SACzDC,QAAQC,IAAI,kCAA8BP,EAC5C,CAAE,MAAOQ,GACPF,QAAQE,MAAM,yCAAqCA,EACrD,GA6IF,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,CACtB7B,IACC8B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wFAAuFC,UACpGF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4CAA2CC,SAAA,EACxDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gGACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0HAKrBD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mHAAkHC,SAAA,EAC/HF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4FAA4FG,QAASA,IAAMlC,GAAWD,GAAQiC,SAAA,EAC3IC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yDAAwDC,SAAC,oBACvEC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,+CAA8CC,SAAEjC,GAASkC,EAAAA,EAAAA,KAACE,EAAAA,EAAS,KAAMF,EAAAA,EAAAA,KAACG,EAAAA,EAAY,SAGvGrC,IACCkC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,8JAA6JC,SACzKpC,EAAU4B,KAAI,CAACa,EAAUC,KACxBR,EAAAA,EAAAA,MAAA,OAAiBC,UAAU,uDAAsDC,SAAA,EAC/EC,EAAAA,EAAAA,KAAA,SACEM,KAAK,OACLC,YAAa,kBAAkBF,EAAQ,OACvCG,MAAOJ,EACPK,SAAWC,GAvGDC,EAACN,EAAOG,KAChC,MAAMI,EAAmB,IAAIjD,GAC7BiD,EAAiBP,GAASG,EAC1B5C,EAAagD,EAAiB,EAoGCD,CAAkBN,EAAOK,EAAEG,OAAOL,OACnDV,UAAU,8IAEZE,EAAAA,EAAAA,KAAA,UACEC,QAASA,IAjGKI,KACxB1C,EAAUmD,OAAS,GACrBlD,EAAaD,EAAUoD,QAAO,CAACC,EAAGC,IAAMA,IAAMZ,IAChD,EA8F6Ba,CAAqBb,GACpCc,SAA+B,IAArBxD,EAAUmD,OACpBhB,UAAU,qEAAoEC,SAC/E,aAZOM,QAoBhBR,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,UAAQC,QAjHUmB,KACxBxD,EAAa,IAAID,EAAW,IAAI,EAgHUmC,UAAU,gEAA+DC,SAAC,kBAC9GC,EAAAA,EAAAA,KAAA,UAAQC,QAxGOpB,UACrB,MAAMwC,EAAoB1D,EAAUoD,QAAQX,GAAiC,KAApBA,EAASkB,SAClE,IAAKD,EAAkBP,OAAQ,OAE/B3C,GAAW,GACXuB,QAAQC,IAAI,oCAA2B0B,QCtIRxC,OAAO0C,EAAQC,EAAQC,KACxD,IACE/B,QAAQC,IAAI,wCAA+B,CAAE4B,SAAQC,SAAQC,YAC7D,MAAMC,QAAeC,EAAAA,EAAAA,KAAO3C,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,oBAAqB,CAC9DsC,SACAC,SACAC,UACAG,WAAWC,EAAAA,EAAAA,QAEbnC,QAAQC,IAAI,yCAAqC+B,EAAOI,GAC1D,CAAE,MAAOlC,GACPF,QAAQE,MAAM,wCAAoCA,EACpD,GD4HQmC,CAAoB,gBAAiB,oBAAqB,CAAEpE,UAAW0D,IAE7E,MAAMW,EAAWX,EAAkB9B,KAAIV,UACrC,MAAM,SAAEoD,EAAQ,SAAEC,GAtFUnD,KAC9B,IAAIkD,EAAW,GACXC,EAAW,CAAC,EAEhB,GAAI,mBAAmBC,KAAKpD,GAC1BkD,EAAW,uBACXC,EAAW,CAAEA,SAAUnD,EAAMqD,QAAQ,uDAAwD,IAAId,aAC5F,GAAI,6DAA6Da,KAAKpD,GAC3EkD,EAAW,sBACXC,EAAW,CAAEA,SAAUnD,EAAMqD,QAAQ,qDAAsD,IAAId,aAC1F,GAAI,WAAWa,KAAKpD,GACzBkD,EAAW,eACXC,EAAW,CAAEA,SAAUnD,EAAMqD,QAAQ,uBAAwB,IAAId,aAC5D,GAAI,YAAYa,KAAKpD,GAC1BkD,EAAW,gBACXC,EAAW,CAAEA,SAAUnD,EAAMqD,QAAQ,8CAA+C,IAAId,aACnF,GAAI,WAAWa,KAAKpD,GACzBkD,EAAW,eACXC,EAAW,CAAEA,SAAUnD,EAAMqD,QAAQ,oBAAqB,IAAId,aACzD,GAAI,0BAA0Ba,KAAKpD,GAAQ,CAChDkD,EAAW,uBACX,MAAOI,EAAUC,GAAavD,EAAMwD,MAAM,KAAKhD,KAAIiD,GAASA,EAAMlB,SAClEY,EAAW,CAAEG,SAAUI,WAAWJ,GAAWC,UAAWG,WAAWH,GACrE,MACEL,EAAW,cACXC,EAAW,CAAEnD,MAAOA,EAAMuC,QAK5B,IAA0BoB,EAAMC,EAAaC,EA2B7C,OA3B0BF,EAyBT,EAzBeC,EAyBZ,EAzByBC,EAyBtB,EAxBrBC,MAAM,yBAA0B,CAC9BC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBR,KAAMA,EACNC,YAAaA,EACbC,OAAQA,MAGXO,MAAKC,GAAYA,EAASC,SAC1BF,MAAK1D,IACAA,EAAK6D,aAAe7D,EAAK8D,UAC3B7D,QAAQC,IAAI,gBAAgBF,EAAK6D,eACjC5D,QAAQC,IAAI,aAAaF,EAAK8D,aAE9B7D,QAAQE,MAAM,qBAAsBH,EAAKG,MAC3C,IAED4D,OAAM5D,GAASF,QAAQE,MAAM,SAAUA,KAMnC,CAAEqC,WAAUC,WAAU,EA6BIuB,CAAuB1E,GACtD,IAAKkD,GAA6C,IAAjCyB,OAAOC,KAAKzB,GAAUpB,OAAc,OAAO,KAE5D,MAAM8C,EAAkBxF,EAAOyF,OAAO,GAAGtE,KAAKuE,GAAMA,EAAEV,WAAUW,KAAK,MAErE,IACErE,QAAQC,IAAI,oCAA0BsC,mBAA2BC,GAEjE,MAAMkB,QAAiBP,MAAM,wBAAwBZ,IAAY,CAC/Da,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,IAAKhB,EAAU8B,QAASJ,MAG/C,IAAKR,EAASa,GACZ,MAAM,IAAIC,MAAM,uBAAuBd,EAASe,UAGlD,MAAM1E,QAAa2D,EAASC,OAgB5B,OAfA3D,QAAQC,IAAI,wBAAmBsC,KAAaxC,GAG5CpB,EAAgBU,EAAOU,SAGjBkC,EAAAA,EAAAA,KAAO3C,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,eAAgB,CAC1CmB,SAAUrB,EACVqF,QAAS3E,EACTmC,UAAW,IAAIyC,OAIjB7F,GAAgB8F,GAAS,IAAIA,EAAM,CAAEvF,QAAOqE,SAAU3D,MAE/C,CAAEV,QAAOqE,SAAU3D,EAC5B,CAAE,MAAOG,GAEP,OADAF,QAAQE,MAAM,8BAAyBqC,KAAarC,GAC7C,CAAEb,QAAOa,MAAOA,EAAM2E,QAC/B,KAGIvG,QAAgBwG,QAAQC,IAAIzC,EAASjB,OAAO2D,UAClDhF,QAAQC,IAAI,8BAAqB3B,GACjCC,EAAWD,GACXG,GAAW,GAEPT,GACFA,EAAWM,EACb,EA8CuCmD,SAAUxD,EAAUgH,OAAOC,GAAmB,KAAbA,EAAEtD,SAAgBxB,UAAU,iEAAgEC,SAC3J7B,EAAU,gBAAkB,mBAKlCF,EAAQ8C,OAAS,IAChBjB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uDAAsDC,SAAA,EACnEC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yDAAwDC,SAAC,uBACtE/B,EAAQuB,KAAI,CAACsF,EAAQxE,KACpBR,EAAAA,EAAAA,MAAA,OAAiBC,UAAU,OAAMC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,iDAAgDC,SAAE8E,EAAO9F,SACvEiB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sDAAqDC,SAAEkD,KAAKC,UAAU2B,EAAOzB,SAAU,KAAM,OAFpG/C,UAStB,C,qBExJA,SAASyE,EAAe1B,GAAW,IAAD2B,EAGhC,OAFArF,QAAQC,IAAI,4BAAwByD,GAE/BA,GAAgC,kBAAbA,GAStBvD,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAEGqD,EAAS4B,YACR5B,EAAS4B,WAAWlE,OAAS,GAC7BsC,EAAS4B,WAAW,GAAGC,QAAQC,MAAMpE,OAAS,IAC5CjB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0DAAyDC,SAAA,EACtEF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,iBAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,qBACdC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,mCAAkCC,SAC5CqD,EAAS4B,WAAW,GAAGC,QAAQC,MAAM,GAAGC,UAM5B,YAApB/B,EAASe,QACRf,EAAS3D,MACgB,kBAAlB2D,EAAS3D,OACf2F,MAAMC,QAAQjC,EAAS3D,QACtBI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+DAA8DC,SAAA,EAC3EF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,iBAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAkB,IAAEqD,EAAS3D,KAAKyC,UAAY,UAC5DrC,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,uBAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,iBAAqB,IAAEqD,EAAS3D,KAAK6F,aAAe,MAAM,YACzEzF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,WAAEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,eAAmB,IAAEqD,EAAS3D,KAAK8F,aAAe,SAC9DnC,EAAS3D,KAAK+F,MACbxF,EAAAA,EAAAA,KAAA,OAAKyF,IAAK,SAASrC,EAAS3D,KAAK+F,OAAQE,IAAI,eAAe5F,UAAU,eAEtEE,EAAAA,EAAAA,KAAA,KAAAD,SAAG,8CAMU,YAApBqD,EAASe,SACK,QADeY,EAC5B3B,EAAS3D,YAAI,IAAAsF,OAAA,EAAbA,EAAeY,WACfvC,EAAS3D,KAAKkG,SAAS7E,OAAS,IAC9BjB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,iBAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,uBACbqD,EAAS3D,KAAKkG,SAAS9B,MAAM,EAAG,GAAGtE,KAAI,CAACqG,EAAKC,KAAG,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAC/CtG,EAAAA,EAAAA,MAAA,OAEEC,UAAU,oJAAmJC,SAAA,EAE7JF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,iBAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,UAAc,KAAK,OAAH6F,QAAG,IAAHA,OAAG,EAAHA,EAAKQ,OAAQ,UAC3CvG,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,uBAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAkB,KAAK,OAAH6F,QAAG,IAAHA,GAAQ,QAALE,EAAHF,EAAKA,WAAG,IAAAE,OAAL,EAAHA,EAAUO,YAAa,MAAM,YAChExG,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,uBAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAkB,KAAK,OAAH6F,QAAG,IAAHA,GAAQ,QAALG,EAAHH,EAAKA,WAAG,IAAAG,OAAL,EAAHA,EAAUO,YAAa,MAAM,YAChEzG,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,WAAEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,eAAmB,KAAK,OAAH6F,QAAG,IAAHA,GAAQ,QAALI,EAAHJ,EAAKA,WAAG,IAAAI,GAAW,QAAXC,EAARD,EAAUO,iBAAS,IAAAN,OAAhB,EAAHA,EAAqBd,OAAQ,SAC3D,OAAHS,QAAG,IAAHA,GAAQ,QAALM,EAAHN,EAAKA,WAAG,IAAAM,GAAW,QAAXC,EAARD,EAAUK,iBAAS,IAAAJ,GAAnBA,EAAqBX,MACpBxF,EAAAA,EAAAA,KAAA,OAAKyF,IAAK,SAASG,EAAIA,IAAIW,UAAUf,OAAQE,IAAI,gBAAgB5F,UAAU,eAE3EE,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6CAVA8F,EAYD,OAMO,YAApBzC,EAASe,QACRf,EAASoD,SACTpB,MAAMC,QAAQjC,EAASoD,UACvBpD,EAASoD,QAAQ1F,OAAS,IACxBjB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,iBAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,8BACbqD,EAASoD,QAAQ3C,MAAM,EAAG,GAAGtE,KAAI,CAACqG,EAAKC,KAAG,IAAAY,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OACzCjH,EAAAA,EAAAA,MAAA,OAEEC,UAAU,oJAAmJC,SAAA,EAE7JF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,iBAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,UAAc,KAAK,OAAH6F,QAAG,IAAHA,OAAG,EAAHA,EAAKQ,OAAQ,UAC3CvG,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,uBAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAkB,KAAK,OAAH6F,QAAG,IAAHA,GAAQ,QAALa,EAAHb,EAAKA,WAAG,IAAAa,OAAL,EAAHA,EAAUJ,YAAa,MAAM,YAChExG,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,uBAAIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAkB,KAAK,OAAH6F,QAAG,IAAHA,GAAQ,QAALc,EAAHd,EAAKA,WAAG,IAAAc,OAAL,EAAHA,EAAUJ,YAAa,MAAM,YAChEzG,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,WAAEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,eAAmB,KAAK,OAAH6F,QAAG,IAAHA,GAAQ,QAALe,EAAHf,EAAKA,WAAG,IAAAe,GAAW,QAAXC,EAARD,EAAUJ,iBAAS,IAAAK,OAAhB,EAAHA,EAAqBzB,OAAQ,SAC3D,OAAHS,QAAG,IAAHA,GAAQ,QAALiB,EAAHjB,EAAKA,WAAG,IAAAiB,GAAW,QAAXC,EAARD,EAAUN,iBAAS,IAAAO,GAAnBA,EAAqBtB,MACpBxF,EAAAA,EAAAA,KAAA,OAAKyF,IAAK,SAASG,EAAIA,IAAIW,UAAUf,OAAQE,IAAI,eAAe5F,UAAU,eAE1EE,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6CAVA8F,EAYD,OAMbzC,EAAS2D,SAAuC,kBAArB3D,EAAS2D,SAAwB,QAAS3D,EAAS2D,SAAW,QAAS3D,EAAS2D,UAC1GlH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0DAAyDC,SAAA,EACtEF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,iBAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,qBACdF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,iBAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAkB,IAAEqD,EAAS2D,QAAQC,QACnDnH,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,iBAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,eAAmB,IAAEqD,EAAS2D,QAAQE,UAIvD7D,EAAS2D,SAAuC,kBAArB3D,EAAS2D,UACnC/G,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0DAAyDC,UACtEF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,iBAAGC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,uBAA2B,IAAEqD,EAAS2D,cAKrD3D,EAAS4B,aAAe5B,EAAS3D,OAAS2D,EAAS2D,UAAY3D,EAASoD,UACzExG,EAAAA,EAAAA,KAAA,KAAGF,UAAU,0DAAyDC,SAAC,6CAzGzEC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,mEAAkEC,SAAC,qCA6GtF,CAGA,QAtN+BtC,IAA8B,IAA7B,QAAEO,EAAO,WAAEC,GAAYR,EACrD,MAAM,YAAEyJ,IAAgBC,EAAAA,EAAAA,MACjBC,EAAeC,IAAoBxJ,EAAAA,EAAAA,UAAS,OAC5CyJ,EAAkBC,IAAuB1J,EAAAA,EAAAA,UAAS,MAGzD,IAAKG,GAA8B,IAAnBA,EAAQ8C,OACtB,OACEjB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0HAAyHC,SAAA,EACtIC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yDAAwDC,SAAC,qBAGvEC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,iCAAgCC,SAAC,8BAKpD,MAKKyH,EAAiBA,CAAC5F,EAAW6F,KAClC/H,QAAQC,IAAI,uCAAuCiC,gBAAwB6F,KAE3EJ,EAAiBI,GAGjBC,YAAW,KACTL,EAAiB,KAAK,GACrB,KAEHH,EAAYtF,EAAW6F,EAAS,EAIhC,OACE5H,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0JAAyJC,SAAA,EACtKC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yDAAwDC,SAAC,qBAKvEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qGAAoGC,SAChH/B,EAAQ+C,OAAO2D,SAASnF,KAAI,CAACsF,EAAQxE,KACpCR,EAAAA,EAAAA,MAAA,OAEEC,UAAU,+JAA8JC,SAAA,EAExKC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,uDAAsDC,UAC3D,OAAN8E,QAAM,IAANA,OAAM,EAANA,EAAQ9F,QAAS,kBAEb,OAAN8F,QAAM,IAANA,GAAAA,EAAQjF,OACPC,EAAAA,EAAAA,MAAA,KAAGC,UAAU,uBAAsBC,SAAA,CAAC,UAAG8E,EAAOjF,UAE9CI,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gDAA+CC,SAC3D+E,EAAqB,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQzB,aAK5BvD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oCAAmCC,SAAA,EAChDF,EAAAA,EAAAA,MAAA,UACEC,WACoB,aAAlBsH,EAA+B,eAAiB,gBADvC,qGAGXnH,QAASA,IAAMuH,EAAqB,OAAN3C,QAAM,IAANA,OAAM,EAANA,EAAQjD,UAAW,YAAY7B,SAAA,EAE7DC,EAAAA,EAAAA,KAAC2H,EAAAA,IAAU,CAAC7H,UAAU,YAAY,QAEpCD,EAAAA,EAAAA,MAAA,UACEC,WACoB,aAAlBsH,EAA+B,aAAe,cADrC,mGAGXnH,QAASA,IAAMuH,EAAqB,OAAN3C,QAAM,IAANA,OAAM,EAANA,EAAQjD,UAAW,YAAY7B,SAAA,EAE7DC,EAAAA,EAAAA,KAAC4H,EAAAA,IAAY,CAAC9H,UAAU,YAAY,YA9BnCO,QAsCXL,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAuBC,UACpCC,EAAAA,EAAAA,KAAA,UACEC,QArEY4H,KACd5J,GAAYA,EAAW,GAAG,EAqExB6B,UAAU,+HAA8HC,SACzI,cAIC,ECPV,EAzF6BtC,IAA6B,IAA5B,cAAEqK,EAAgB,IAAIrK,EAClD,MAAOsK,EAAWC,IAAgBnK,EAAAA,EAAAA,UAAS,QACpCC,EAAQC,IAAaF,EAAAA,EAAAA,WAAS,GAGR,IAAzBiK,EAAchH,SAChBgH,EAAgB,CACd,CAAEG,MAAO,aAAczH,MAAO,IAC9B,CAAEyH,MAAO,aAAczH,MAAO,IAC9B,CAAEyH,MAAO,aAAczH,MAAO,OAKlC7B,EAAAA,EAAAA,YAAU,KACR,MAAMuJ,EAAaC,aAAaC,QAAQ,sBACrB,OAAfF,GACFnK,EAAUkF,KAAKoF,MAAMH,GACvB,GACC,KAGHvJ,EAAAA,EAAAA,YAAU,KACRwJ,aAAaG,QAAQ,qBAAsBrF,KAAKC,UAAUpF,GAAQ,GACjE,CAACA,IAuBJ,OACE+B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mHAAkHC,SAAA,EAC/HF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yDAAwDC,SAAC,uBAGvEC,EAAAA,EAAAA,KAAA,UACEC,QAASA,IAAMlC,GAAWD,GAC1BgC,UAAU,8CAA6CC,SAEtDjC,GAASkC,EAAAA,EAAAA,KAACE,EAAAA,EAAS,KAAKF,EAAAA,EAAAA,KAACG,EAAAA,EAAY,SAIzCrC,IACC+B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,wCAAuCC,SAAC,qDAIrDC,EAAAA,EAAAA,KAAA,SAAOF,UAAU,8CAA6CC,SAAC,wBAG/DF,EAAAA,EAAAA,MAAA,UACEW,MAAOuH,EACPtH,SAAWC,GAAMsH,EAAatH,EAAEG,OAAOL,OACvCV,UAAU,kEAAiEC,SAAA,EAE3EC,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,MAAKT,SAAC,eACpBC,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,OAAMT,SAAC,gBACrBC,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,UAAST,SAAC,aACxBC,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,MAAKT,SAAC,eACpBC,EAAAA,EAAAA,KAAA,UAAQQ,MAAM,oBAAmBT,SAAC,yBApDrC+H,GAA0C,IAAzBA,EAAchH,QAMlCjB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oCAAmCC,SAAA,EAChDF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,yBAAwBC,SAAA,CAAC,kBAAgBgI,EAAU,QACjE/H,EAAAA,EAAAA,KAAA,MAAIF,UAAU,YAAWC,SACtB+H,EAAcvI,KAAI,CAACgJ,EAAMlI,KACxBR,EAAAA,EAAAA,MAAA,MAAgBC,UAAU,uBAAsBC,SAAA,EAC9CC,EAAAA,EAAAA,KAAA,QAAAD,SAAOwI,EAAKN,SACZjI,EAAAA,EAAAA,KAAA,QAAAD,SAAOwI,EAAK/H,UAFLH,WATRL,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gBAAeC,SAAC,sBAsDjB,SAGf,EClCV,EAjDwByI,KAEpB3I,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAG7BF,EAAAA,EAAAA,MAAA,UAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,sDAAqDC,SAAC,iBAGpEC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gDAA+CC,SAAC,6DAM/DF,EAAAA,EAAAA,MAAA,WAASC,UAAU,wCAAuCC,SAAA,EAExDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,SAAQC,UACrBC,EAAAA,EAAAA,KAACxC,EAAa,OAIhBqC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sFAAqFC,SAAA,EAClGC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,8DAA6DC,SAAC,sBAG5EC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,qDAAoDC,SAAC,gFAOtEF,EAAAA,EAAAA,MAAA,WAASC,UAAU,wCAAuCC,SAAA,EAExDC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACyI,EAAsB,OAIzBzI,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAC0I,EAAoB,W","sources":["components/ScenarioInput.js","services/userBehaviourService.js","components/SimulationResult.js","components/ScenarioInsightsCard.js","components/OmnisCore.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { saveUserInteraction } from \"../services/userBehaviourService\";\r\nimport { useMemory } from \"../MemoryContext\"; // ✅ Import Memory Context\r\nimport { db } from \"../firebase\"; // Import Firestore database\r\nimport { collection, addDoc, serverTimestamp } from \"firebase/firestore\"; // Import Firestore functions\r\nimport { useAuth } from \"../AuthContext\"; // ✅ Import Auth\r\nimport { query, orderBy, getDocs } from \"firebase/firestore\"; // Import Firestore query functions\r\nimport { ChevronRight, ChevronUp } from \"lucide-react\";\r\n\r\n// Component to simulate multiple scenarios\r\n// and store the results in memory\r\nexport default function ScenarioInput({ onSimulate }) {\r\n  const [scenarios, setScenarios] = useState([\"\"]);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [results, setResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const { memory, saveToFirestore } = useMemory(); // ✅ AI Memory Hook\r\n  const [chatHistory, setChatHistory] = useState([]); // ✅ Store previous interactions\r\n  const { user } = useAuth(); // ✅ Get current user\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadFirestoreMemory(); // ✅ Load memory from Firestore when user logs in\r\n    }\r\n  }, [user]);\r\n\r\n  const handleScenarioSubmit = async (query, response) => {\r\n    try {\r\n      const historyEntry = {\r\n        query,\r\n        response,\r\n        timestamp: serverTimestamp(),\r\n      };\r\n\r\n      // ✅ Save to Firestore\r\n      await addDoc(collection(db, \"chatHistory\"), historyEntry);\r\n      console.log(\"History saved!\");\r\n    } catch (error) {\r\n      console.error(\"Error saving history:\", error);\r\n    }\r\n  };\r\n\r\n  const loadFirestoreMemory = async () => {\r\n    if (!user) return;\r\n    try {\r\n      const q = query(\r\n        collection(db, \"users\", user.uid, \"memory\"),\r\n        orderBy(\"timestamp\", \"desc\") // ✅ Load latest memories first\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      const loadedMemory = querySnapshot.docs.map((doc) => doc.data());\r\n      console.log(\"✅ Firestore Memory Loaded:\", loadedMemory);\r\n    } catch (error) {\r\n      console.error(\"❌ Error loading Firestore memory:\", error);\r\n    }\r\n  };\r\n\r\n  const getEndpointAndLocation = (query) => {\r\n    let endpoint = \"\";\r\n    let location = {};\r\n\r\n    if (/weather history/i.test(query)) {\r\n      endpoint = \"/api/weather-history\";\r\n      location = { location: query.replace(/.*(?:weather history for|weather history in|for)\\s+/i, \"\").trim() };\r\n    } else if (/weather alerts|weather warning|storm alert|severe weather/i.test(query)) {\r\n      endpoint = \"/api/weather-alerts\";\r\n      location = { location: query.replace(/.*(?:weather alerts for|weather alerts in|for)\\s+/i, \"\").trim() };\r\n    } else if (/weather/i.test(query)) {\r\n      endpoint = \"/api/weather\";\r\n      location = { location: query.replace(/.*(?:weather in)\\s+/i, \"\").trim() };\r\n    } else if (/forecast/i.test(query)) {\r\n      endpoint = \"/api/forecast\";\r\n      location = { location: query.replace(/.*(?:forecast in| weather forecast for)\\s+/i, \"\").trim() };\r\n    } else if (/geocode/i.test(query)) {\r\n      endpoint = \"/api/geocode\";\r\n      location = { location: query.replace(/.*(?:geocode)\\s+/i, \"\").trim() };\r\n    } else if (/\\d+\\.\\d+\\s*,\\s*\\d+\\.\\d+/.test(query)) {\r\n      endpoint = \"/api/reverse_geocode\";\r\n      const [latitude, longitude] = query.split(\",\").map(coord => coord.trim());\r\n      location = { latitude: parseFloat(latitude), longitude: parseFloat(longitude) };\r\n    } else {\r\n      endpoint = \"/api/gemini\";\r\n      location = { query: query.trim() };\r\n    }\r\n\r\n    // frontend/app.js\r\n    // Function to send user input and get decision\r\n    function evaluateDecision(risk, probability, impact) {\r\n      fetch('/api/evaluate_decision', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          risk: risk,\r\n          probability: probability,\r\n          impact: impact\r\n        })\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.total_score && data.decision) {\r\n          console.log(`Total Score: ${data.total_score}`);\r\n          console.log(`Decision: ${data.decision}`);\r\n        } else {\r\n          console.error(\"Error in response:\", data.error);\r\n        }\r\n      })\r\n      .catch(error => console.error(\"Error:\", error));\r\n    }\r\n\r\n    // Example usage: call with values provided by the user (e.g., from input fields)\r\n    evaluateDecision(7, 5, 8);  // Replace with actual user inputs\r\n\r\n    return { endpoint, location };\r\n  };\r\n\r\n  const handleInputChange = (index, value) => {\r\n    const updatedScenarios = [...scenarios];\r\n    updatedScenarios[index] = value;\r\n    setScenarios(updatedScenarios);\r\n  };\r\n\r\n  const handleAddScenario = () => {\r\n    setScenarios([...scenarios, \"\"]);\r\n  };\r\n\r\n  const handleRemoveScenario = (index) => {\r\n    if (scenarios.length > 1) {\r\n      setScenarios(scenarios.filter((_, i) => i !== index));\r\n    }\r\n  };\r\n\r\n  const handleSimulate = async () => {\r\n    const filteredScenarios = scenarios.filter((scenario) => scenario.trim() !== \"\");\r\n    if (!filteredScenarios.length) return;\r\n  \r\n    setLoading(true);\r\n    console.log(\"📊 Simulating scenario:\", filteredScenarios);\r\n  \r\n    await saveUserInteraction(\"test_user_123\", \"simulate_scenario\", { scenarios: filteredScenarios });\r\n  \r\n    const requests = filteredScenarios.map(async (query) => {\r\n      const { endpoint, location } = getEndpointAndLocation(query);\r\n      if (!endpoint || Object.keys(location).length === 0) return null;\r\n  \r\n      const previousContext = memory.slice(-3).map((m) => m.response).join(\"\\n\");\r\n  \r\n      try {\r\n        console.log(`📤 Sending request to: ${endpoint} with location:`, location);\r\n  \r\n        const response = await fetch(`http://127.0.0.1:5000${endpoint}`, {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ ...location, context: previousContext }),\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n  \r\n        const data = await response.json();\r\n        console.log(`✅ Response from ${endpoint}:`, data);\r\n  \r\n        // 🔥 Save to AI memory context\r\n        saveToFirestore(query, data);\r\n  \r\n        // ✅ Save to chatHistory Firestore collection\r\n        await addDoc(collection(db, \"chatHistory\"), {\r\n          scenario: query,\r\n          outcome: data,\r\n          timestamp: new Date(),\r\n        });\r\n  \r\n        // ✅ Update local UI state\r\n        setChatHistory((prev) => [...prev, { query, response: data }]);\r\n  \r\n        return { query, response: data };\r\n      } catch (error) {\r\n        console.error(`❌ Error fetching from ${endpoint}:`, error);\r\n        return { query, error: error.message };\r\n      }\r\n    });\r\n  \r\n    const results = await Promise.all(requests.filter(Boolean));\r\n    console.log(\"🔍 Final results:\", results);\r\n    setResults(results);\r\n    setLoading(false);\r\n  \r\n    if (onSimulate) {\r\n      onSimulate(results);\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      {loading && (\r\n        <div className=\"fixed inset-0 bg-black transition bg-opacity-50 flex items-center justify-center z-50\">\r\n          <div className=\"relative flex items-center justify-center\">\r\n            <div className=\"absolute w-16 h-16 border-8 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\r\n            <div className=\"w-12 h-12 border-8 border-green-500 border-t-transparent rounded-full animate-[spin_1s_linear_reverse_infinite]\"></div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"bg-white dark:bg-gray-800 shadow-lg hover:shadow-blue-500/50 rounded-lg p-6 border text-gray-900 dark:text-white\">\r\n        <div className=\"flex justify-between items-center cursor-pointer p-3 bg-white rounded-md dark:bg-gray-800\" onClick={() => setIsOpen(!isOpen)}>\r\n          <h2 className=\"text-xl font-semibold text-blue-500 dark:text-blue-300\">Scenario Input</h2>\r\n          <span className=\"text-blue-500 dark:text-blue-300 font-medium\">{isOpen ? <ChevronUp /> : <ChevronRight />}</span>\r\n        </div>\r\n\r\n        {isOpen && (\r\n          <div className=\"overflow-y-auto scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-200 overflow-hidden transition-all duration-300 max-h-[300px] opacity-100 mt-4\">\r\n            {scenarios.map((scenario, index) => (\r\n              <div key={index} className=\"mb-4 p-4 rounded-lg shadow-sm border border-gray-300\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder={`Enter scenario ${index + 1}...`}\r\n                  value={scenario}\r\n                  onChange={(e) => handleInputChange(index, e.target.value)}\r\n                  className=\"w-full p-2 border rounded bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                />\r\n                <button\r\n                  onClick={() => handleRemoveScenario(index)}\r\n                  disabled={scenarios.length === 1}\r\n                  className=\"mt-2 px-3 py-2 bg-gray-500 text-white rounded-full hover:scale-105\"\r\n                >\r\n                  Remove\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"flex gap-1 mt-4\">\r\n          <button onClick={handleAddScenario} className=\"px-4 py-2 bg-blue-600 text-white rounded-full hover:scale-105\">Add Scenario</button>\r\n          <button onClick={handleSimulate} disabled={scenarios.every((s) => s.trim() === \"\")} className=\"px-4 py-2 bg-green-600 text-white rounded-full hover:scale-105\">\r\n            {loading ? \"Simulating...\" : \"Simulate\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {results.length > 0 && (\r\n        <div className=\"mt-4 bg-white dark:bg-gray-800 p-4 border rounded-lg\">\r\n          <h3 className=\"text-lg font-semibold text-blue-500 dark:text-blue-300\">Simulation Results</h3>\r\n          {results.map((result, index) => (\r\n            <div key={index} className=\"mb-4\">\r\n              <h4 className=\"font-semibold text-blue-500 dark:text-blue-300\">{result.query}</h4>\r\n              <pre className=\"bg-gray-100 dark:bg-gray-700 p-4 rounded-md text-sm\">{JSON.stringify(result.response, null, 2)}</pre>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { db } from \"../firebase\";  // ✅ CORRECT path\r\n  // ✅ Make sure it's imported only once\r\nimport { collection, addDoc, serverTimestamp } from \"firebase/firestore\";\r\n\r\nexport const saveUserInteraction = async (userId, action, details) => {\r\n  try {\r\n    console.log(\"📤 Saving user interaction:\", { userId, action, details }); // Debug log\r\n    const docRef = await addDoc(collection(db, \"userInteractions\"), {\r\n      userId,\r\n      action,\r\n      details,\r\n      timestamp: serverTimestamp(),\r\n    });\r\n    console.log(\"✅ User interaction saved with ID:\", docRef.id);\r\n  } catch (error) {\r\n    console.error(\"❌ Error saving user interaction:\", error);\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useOmnisContext } from \"../context/OmnisContext\"; // Import context to handle feedback\r\nimport { FiThumbsUp, FiThumbsDown } from \"react-icons/fi\";\r\nimport { useState } from \"react\"; // Make sure to import useState here\r\n\r\n\r\n\r\nconst ScenarioSimulationCard = ({ results, setResults }) => {\r\n  const { addFeedback } = useOmnisContext(); // Access feedback function from context\r\n  const [clickedButton, setClickedButton] = useState(null); // Track the clicked button\r\n  const [clickedTimestamp, setClickedTimestamp] = useState(null); // Track timestamp of the click for fading\r\n\r\n\r\n  if (!results || results.length === 0) {\r\n    return (\r\n      <div className=\"bg-white dark:bg-gray-800 shadow-lg border hover:shadow-blue-500/50 rounded-lg p-6 border text-gray-900 dark:text-white\">\r\n        <h2 className=\"text-xl font-semibold text-blue-500 dark:text-blue-300\">\r\n          Scenario Output\r\n        </h2>\r\n        <p className=\"text-gray-500 text-center mt-4\">No results to display.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handleReset = () => {\r\n    if (setResults) setResults([]);\r\n  };\r\n\r\n // Handle feedback click and color change\r\n const handleFeedback = (timestamp, feedback) => {\r\n  console.log(`Feedback button clicked! Timestamp: ${timestamp}, Feedback: ${feedback}`);\r\n  \r\n  setClickedButton(feedback); // Change button color on click\r\n\r\n  // Reset the button color after 2 seconds\r\n  setTimeout(() => {\r\n    setClickedButton(null); // Reset color\r\n  }, 5000);\r\n\r\n  addFeedback(timestamp, feedback); // Save thumbs up/down feedback\r\n};\r\n\r\n\r\n  return (\r\n    <div className=\"bg-white shadow-lg hover:shadow-blue-500/50 dark:bg-gray-900 rounded-lg p-6 border dark:border text-gray-900 dark:text-white text-2xl col-span-2 w-full\">\r\n      <h2 className=\"text-xl font-semibold text-blue-500 dark:text-blue-300\">\r\n        Scenario Output\r\n      </h2>\r\n\r\n      {/* 🔹 Scrollable Container for Outputs */}\r\n      <div className=\"max-h-40 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-gray-200 p-2 mt-3\">\r\n        {results.filter(Boolean).map((result, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"bg-gray-50 dark:bg-gray-800 p-4 rounded-full shadow border border-gray-200 dark:border-gray-700 mb-3 group hover:scale-100 transition-transform duration-200\"\r\n          >\r\n            <h4 className=\"text-md font-medium text-gray-700 dark:text-gray-200\">\r\n              {result?.query || \"Unknown Query\"}\r\n            </h4>\r\n            {result?.error ? (\r\n              <p className=\"text-red-500 text-sm\">❌ {result.error}</p>\r\n            ) : (\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-300 mt-2\">\r\n                {formatResponse(result?.response)}\r\n              </div>\r\n            )}\r\n\r\n             {/* 🔹 Thumbs Up/Down Buttons for Feedback */}\r\n            <div className=\"flex justify-start space-x-4 mt-2\">\r\n              <button\r\n                className={`${\r\n                  clickedButton === \"positive\" ? \"bg-green-600\" : \"bg-green-500\"\r\n                } hover:bg-green-600 text-white px-3 py-1 rounded-lg transition-transform transform hover:scale-105`}\r\n                onClick={() => handleFeedback(result?.timestamp, \"positive\")}\r\n              >\r\n                <FiThumbsUp className=\"text-xl\" /> {/* FiThumbsUp icon */}\r\n              </button>\r\n              <button\r\n                className={`${\r\n                  clickedButton === \"negative\" ? \"bg-red-600\" : \"bg-red-500\"\r\n                } hover:bg-red-600 text-white px-3 py-1 rounded-lg transition-transform transform hover:scale-105`}\r\n                onClick={() => handleFeedback(result?.timestamp, \"negative\")}\r\n              >\r\n                <FiThumbsDown className=\"text-xl\" /> {/* FiThumbsDown icon */}\r\n              </button>\r\n            </div>\r\n\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"flex justify-end mt-4\">\r\n        <button\r\n          onClick={handleReset}\r\n          className=\"bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-full transition-transform transform hover:scale-100 active:scale-95\"\r\n        >\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Function to format response correctly\r\nfunction formatResponse(response) {\r\n  console.log(\"✅ Full API Response:\", response); // ✅ Debugging\r\n\r\n  if (!response || typeof response !== \"object\") {\r\n    return (\r\n      <p className=\"group-hover:scale-100 text-3xl transition-transform duration-200\">\r\n        ❌ Invalid response received.\r\n      </p>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* ✅ AI Response Handling */}\r\n      {response.candidates &&\r\n        response.candidates.length > 0 &&\r\n        response.candidates[0].content.parts.length > 0 && (\r\n          <div className=\"group hover:scale-105 transition-transform duration-200\">\r\n            <p>🤖 <strong>AI Response:</strong></p>\r\n            <p className=\"text-gray-700 dark:text-gray-300\">\r\n              {response.candidates[0].content.parts[0].text}\r\n            </p>\r\n          </div>\r\n        )}\r\n\r\n      {/* ✅ Weather Data Formatting */}\r\n      {response.status === \"success\" &&\r\n        response.data &&\r\n        typeof response.data === \"object\" &&\r\n        !Array.isArray(response.data) && (\r\n          <div className=\"mb-3 group hover:scale-105 transition-transform duration-200\">\r\n            <p>🌍 <strong>Location:</strong> {response.data.location || \"N/A\"}</p>\r\n            <p>🌡️ <strong>Temperature:</strong> {response.data.temperature || \"N/A\"}°C</p>\r\n            <p>⛅ <strong>Condition:</strong> {response.data.description || \"N/A\"}</p>\r\n            {response.data.icon ? (\r\n              <img src={`https:${response.data.icon}`} alt=\"Weather Icon\" className=\"w-10 h-10\" />\r\n            ) : (\r\n              <p>⚠️ No Weather Icon Available</p>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n      {/* ✅ Weather Forecast Formatting - Fixed for 4-Day Forecast */}\r\n      {response.status === \"success\" &&\r\n        response.data?.forecast &&\r\n        response.data.forecast.length > 0 && (\r\n          <div className=\"mt-3\">\r\n            <p>📅 <strong>3-Day Forecast:</strong></p>\r\n            {response.data.forecast.slice(0, 4).map((day, idx) => (\r\n              <div\r\n                key={idx}\r\n                className=\"mt-2 p-3 border border-gray-300 dark:border-gray-600 rounded bg-gray-100 dark:bg-gray-700 group hover:scale-105 transition-transform duration-200\"\r\n              >\r\n                <p>📆 <strong>Date:</strong> {day?.date || \"N/A\"}</p>\r\n                <p>🌡️ <strong>Max Temp:</strong> {day?.day?.maxtemp_c || \"N/A\"}°C</p>\r\n                <p>🌡️ <strong>Min Temp:</strong> {day?.day?.mintemp_c || \"N/A\"}°C</p>\r\n                <p>⛅ <strong>Condition:</strong> {day?.day?.condition?.text || \"N/A\"}</p>\r\n                {day?.day?.condition?.icon ? (\r\n                  <img src={`https:${day.day.condition.icon}`} alt=\"Forecast Icon\" className=\"w-10 h-10\" />\r\n                ) : (\r\n                  <p>⚠️ No Weather Icon Available</p>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n      {/* ✅ Weather History Data Formatting */}\r\n      {response.status === \"success\" &&\r\n        response.history &&\r\n        Array.isArray(response.history) &&\r\n        response.history.length > 0 && (\r\n          <div className=\"mt-3\">\r\n            <p>📜 <strong>5-Day Weather History:</strong></p>\r\n            {response.history.slice(0, 5).map((day, idx) => (\r\n              <div\r\n                key={idx}\r\n                className=\"mt-2 p-3 border border-gray-300 dark:border-gray-600 rounded bg-gray-100 dark:bg-gray-700 group hover:scale-105 transition-transform duration-200\"\r\n              >\r\n                <p>📆 <strong>Date:</strong> {day?.date || \"N/A\"}</p>\r\n                <p>🌡️ <strong>Max Temp:</strong> {day?.day?.maxtemp_c || \"N/A\"}°C</p>\r\n                <p>🌡️ <strong>Min Temp:</strong> {day?.day?.mintemp_c || \"N/A\"}°C</p>\r\n                <p>⛅ <strong>Condition:</strong> {day?.day?.condition?.text || \"N/A\"}</p>\r\n                {day?.day?.condition?.icon ? (\r\n                  <img src={`https:${day.day.condition.icon}`} alt=\"History Icon\" className=\"w-10 h-10\" />\r\n                ) : (\r\n                  <p>⚠️ No Weather Icon Available</p>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n      {/* ✅ Geocoding & Reverse Geocoding Handling */}\r\n      {response.address && typeof response.address === \"object\" && \"lat\" in response.address && \"lng\" in response.address && (\r\n        <div className=\"group hover:scale-105 transition-transform duration-200\">\r\n          <p>📍 <strong>Coordinates:</strong></p>\r\n          <p>🌎 <strong>Latitude:</strong> {response.address.lat}</p>\r\n          <p>🌍 <strong>Longitude:</strong> {response.address.lng}</p>\r\n        </div>\r\n      )}\r\n\r\n      {response.address && typeof response.address === \"string\" && (\r\n        <div className=\"group hover:scale-105 transition-transform duration-200\">\r\n          <p>🏠 <strong>Formatted Address:</strong> {response.address}</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* 🔹 Default Fallback Handling ✅ */}\r\n      {(!response.candidates && !response.data && !response.address && !response.history) && (\r\n        <p className=\"group hover:scale-105 transition-transform duration-200\">❌ No structured data available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// ✅ Fix export issue\r\nexport default ScenarioSimulationCard;\r\n  \r\n  // In the code above, we have added a new function called  formatResponse  that helps us to format the API response correctly based on the type of data we receive. This function will handle the different types of responses we might receive from the API, such as weather data, geocoding data, and AI responses. \r\n  // We have also added a new button to provide feedback on the results displayed. When a user clicks the thumbs up or thumbs down button, we call the  handleFeedback  function to save the feedback along with the timestamp of the result. \r\n  // Finally, we have updated the component to display the formatted response and added a scrollbar to the output container to make it scrollable when the content overflows. \r\n  // Now, let’s test the updated component in the browser. \r\n  // Step 4: Test the Updated Component \r\n  // To test the updated component, run the development server by executing the following command in the terminal: \r\n  // npm start \r\n  // Once the server is running, open your web browser and navigate to  http://localhost:3000 . You should see the updated Scenario Simulation Card component with the ability to provide feedback on the results. \r\n  // Click the “Thumbs Up” or “Thumbs Down” buttons to provide feedback on the results. The feedback will be saved along with the timestamp of the result. \r\n  // Conclusion \r\n  // In this tutorial, we learned how to add a feedback feature to a React component using context. We created a new context to manage the feedback state and added functions to save feedback data. We then updated the component to display the feedback buttons and save the feedback data when the buttons are clicked. \r\n  // By following this tutorial, you should now have a better understanding of how to add feedback functionality to your React components using context. You can extend this feature by adding more feedback options or integrating it with an external service to analyze the feedback data. \r\n  // If you have any questions or feedback, please let us know in the comments. \r\n  // Share this: Twitter Twitter Reddit Reddit LinkedIn LinkedIn Facebook Facebook","import React, { useState, useEffect } from 'react';\r\nimport { ChevronRight, ChevronUp } from \"lucide-react\";\r\n\r\nconst ScenarioInsightsCard = ({ processedData = [] }) => {\r\n  const [chartType, setChartType] = useState(\"bar\");\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  // Dummy Data for testing purposes (remove or replace as needed)\r\n  if (processedData.length === 0) {\r\n    processedData = [\r\n      { label: \"Scenario A\", value: 45 },\r\n      { label: \"Scenario B\", value: 75 },\r\n      { label: \"Scenario C\", value: 30 },\r\n    ];\r\n  }\r\n\r\n  // Load the collapse/expand state from localStorage on component mount\r\n  useEffect(() => {\r\n    const savedState = localStorage.getItem('scenarioCardIsOpen');\r\n    if (savedState !== null) {\r\n      setIsOpen(JSON.parse(savedState)); // Set the state based on localStorage value\r\n    }\r\n  }, []);\r\n\r\n  // Save the collapse/expand state to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('scenarioCardIsOpen', JSON.stringify(isOpen));\r\n  }, [isOpen]);\r\n\r\n  const renderChart = () => {\r\n    if (!processedData || processedData.length === 0) {\r\n      return <p className=\"text-gray-500\">No data available</p>; // Handle empty data\r\n    }\r\n\r\n    // Example dummy chart logic (replace with your real chart)\r\n    return (\r\n      <div className=\"border p-4 rounded-lg bg-gray-100\">\r\n        <h3 className=\"text-lg font-bold mb-2\">Chart Preview ({chartType})</h3>\r\n        <ul className=\"space-y-2\">\r\n          {processedData.map((item, index) => (\r\n            <li key={index} className=\"flex justify-between\">\r\n              <span>{item.label}</span>\r\n              <span>{item.value}</span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white dark:bg-gray-800 shadow-lg hover:shadow-blue-500/50 rounded-lg p-6 border text-gray-900 dark:text-white\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h2 className=\"text-xl font-semibold text-blue-500 dark:text-blue-300\">\r\n          Scenario Insights\r\n        </h2>\r\n        <button\r\n          onClick={() => setIsOpen(!isOpen)}\r\n          className=\"text-blue-500 dark:text-blue-300 font-mediu\"\r\n        >\r\n          {isOpen ? <ChevronUp /> :<ChevronRight/>}\r\n        </button>\r\n      </div>\r\n\r\n      {isOpen && (\r\n        <div className=\"mt-4\">\r\n          <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\r\n            Analyze trends and patterns from scenario data.\r\n          </p>\r\n\r\n          <label className=\"block text-gray-700 dark:text-gray-300 mb-2\">\r\n            Select Chart Type:\r\n          </label>\r\n          <select\r\n            value={chartType}\r\n            onChange={(e) => setChartType(e.target.value)}\r\n            className=\"mb-6 p-2 border rounded w-full dark:bg-gray-700 dark:text-white\"\r\n          >\r\n            <option value=\"bar\">Bar Chart</option>\r\n            <option value=\"line\">Line Chart</option>\r\n            <option value=\"heatmap\">Heatmap</option>\r\n            <option value=\"pie\">Pie Chart</option>\r\n            <option value=\"circular-progress\">Circular Progress</option>\r\n          </select>\r\n\r\n          {renderChart()} {/* This will render dummy data */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScenarioInsightsCard;\r\n// In this code, we have added a new component called ScenarioInsightsCard that allows users to visualize scenario data using different chart types. The component uses dummy data for demonstration purposes, and you can replace it with your actual data processing logic. The collapse/expand functionality is implemented using localStorage to persist the state across page reloads.","import React from 'react';\r\nimport ScenarioInput from './ScenarioInput'; // Input Form\r\nimport ScenarioSimulationCard from './SimulationResult'; // Results\r\nimport ScenarioInsightsCard from './ScenarioInsightsCard'; // Insights\r\n\r\nconst NewScenarioPage = () => {\r\n  return (\r\n    <div className=\"p-6 space-y-10\">\r\n\r\n      {/* Page Header */}\r\n      <header>\r\n        <h1 className=\"text-3xl font-bold text-blue-600 dark:text-blue-300\">\r\n          Omnis' Core\r\n        </h1>\r\n        <p className=\"text-gray-500 dark:text-gray-400 text-sm mt-1\">\r\n          Design and test your decision-making scenarios here.\r\n        </p>\r\n      </header>\r\n\r\n      {/* Input & Preview Section */}\r\n      <section className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\r\n        {/* Left: Scenario Input Form */}\r\n        <div className=\"w-full\">\r\n          <ScenarioInput />\r\n        </div>\r\n\r\n        {/* Right: Live Preview */}\r\n        <div className=\"bg-white dark:bg-gray-800 border shadow-lg hover:shadow-blue-500/50 rounded-lg p-6 \">\r\n          <h2 className=\"text-xl font-semibold text-blue-500 dark:text-blue-300 mb-2\">\r\n            Scenario Preview\r\n          </h2>\r\n          <p className=\"text-gray-500  dark:text-gray-400 text-center mt-6\">\r\n            Your live scenario preview will appear here based on current inputs.\r\n          </p>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Simulation Output Section */}\r\n      <section className=\"grid grid-cols-1 sm:grid-cols-2 gap-6\">\r\n        {/* Left: Simulation Result */}\r\n        <div>\r\n          <ScenarioSimulationCard />\r\n        </div>\r\n\r\n        {/* Right: Scenario Insights */}\r\n        <div>\r\n          <ScenarioInsightsCard />\r\n        </div>\r\n      </section>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewScenarioPage;\r\n"],"names":["ScenarioInput","_ref","onSimulate","scenarios","setScenarios","useState","isOpen","setIsOpen","results","setResults","loading","setLoading","memory","saveToFirestore","useMemory","chatHistory","setChatHistory","user","useAuth","useEffect","loadFirestoreMemory","async","q","query","collection","db","uid","orderBy","loadedMemory","getDocs","docs","map","doc","data","console","log","error","_jsxs","className","children","_jsx","onClick","ChevronUp","ChevronRight","scenario","index","type","placeholder","value","onChange","e","handleInputChange","updatedScenarios","target","length","filter","_","i","handleRemoveScenario","disabled","handleAddScenario","filteredScenarios","trim","userId","action","details","docRef","addDoc","timestamp","serverTimestamp","id","saveUserInteraction","requests","endpoint","location","test","replace","latitude","longitude","split","coord","parseFloat","risk","probability","impact","fetch","method","headers","body","JSON","stringify","then","response","json","total_score","decision","catch","getEndpointAndLocation","Object","keys","previousContext","slice","m","join","context","ok","Error","status","outcome","Date","prev","message","Promise","all","Boolean","every","s","result","formatResponse","_response$data","candidates","content","parts","text","Array","isArray","temperature","description","icon","src","alt","forecast","day","idx","_day$day","_day$day2","_day$day3","_day$day3$condition","_day$day4","_day$day4$condition","date","maxtemp_c","mintemp_c","condition","history","_day$day5","_day$day6","_day$day7","_day$day7$condition","_day$day8","_day$day8$condition","address","lat","lng","addFeedback","useOmnisContext","clickedButton","setClickedButton","clickedTimestamp","setClickedTimestamp","handleFeedback","feedback","setTimeout","FiThumbsUp","FiThumbsDown","handleReset","processedData","chartType","setChartType","label","savedState","localStorage","getItem","parse","setItem","item","NewScenarioPage","ScenarioSimulationCard","ScenarioInsightsCard"],"sourceRoot":""}