{"version":3,"file":"static/js/158.751f72cf.chunk.js","mappings":"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","sources":["../node_modules/date-fns/constructNow.js","../node_modules/date-fns/formatDistance.js","../node_modules/date-fns/formatDistanceToNow.js","components/ActivityLogRow.js"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateArg<DateType>,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nexport function constructNow(date) {\n  return constructFrom(date, Date.now());\n}\n\n// Fallback for modularized imports:\nexport default constructNow;\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { minutesInDay, minutesInMonth } from \"./constants.js\";\nimport { differenceInMonths } from \"./differenceInMonths.js\";\nimport { differenceInSeconds } from \"./differenceInSeconds.js\";\n\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @param laterDate - The date\n * @param earlierDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\nexport function formatDistance(laterDate, earlierDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n\n  const comparison = compareAsc(laterDate, earlierDate);\n\n  if (isNaN(comparison)) throw new RangeError(\"Invalid time value\");\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]),\n  );\n\n  const seconds = differenceInSeconds(earlierDate_, laterDate_);\n  const offsetInSeconds =\n    (getTimezoneOffsetInMilliseconds(earlierDate_) -\n      getTimezoneOffsetInMilliseconds(laterDate_)) /\n    1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options?.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < minutesInMonth) {\n    const days = Math.round(minutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < minutesInMonth * 2) {\n    months = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n\n  months = differenceInMonths(earlierDate_, laterDate_);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistance;\n","import { constructNow } from \"./constructNow.js\";\n\nimport { formatDistance } from \"./formatDistance.js\";\n\n/**\n * The {@link formatDistanceToNow} function options.\n */\n\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * @param date - The given date\n * @param options - The object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nexport function formatDistanceToNow(date, options) {\n  return formatDistance(date, constructNow(date), options);\n}\n\n// Fallback for modularized imports:\nexport default formatDistanceToNow;\n","import React from \"react\";\r\nimport { formatDistanceToNow } from \"date-fns\";\r\n\r\nconst ActivityLogRow = ({ log }) => {\r\n  const { activityType, description, timestamp } = log;\r\n\r\n  return (\r\n    <tr className=\"border-b border-gray-200 dark:border-gray-700\">\r\n      <td className=\"py-3 px-4 whitespace-normal break-words text-sm text-gray-900 dark:text-gray-100\">\r\n        {activityType}\r\n      </td>\r\n      <td className=\"py-3 px-4 whitespace-normal break-words text-sm text-gray-800 dark:text-gray-200\">\r\n        {description}\r\n      </td>\r\n      <td className=\"py-3 px-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-400\">\r\n        {timestamp?.toDate ? formatDistanceToNow(timestamp.toDate(), { addSuffix: true }) : \"N/A\"}\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ActivityLogRow;\r\n"],"names":["constructNow","date","constructFrom","Date","now","formatDistance","laterDate","earlierDate","options","defaultOptions","getDefaultOptions","locale","defaultLocale","comparison","compareAsc","isNaN","RangeError","localizeOptions","Object","assign","addSuffix","laterDate_","earlierDate_","normalizeDates","in","seconds","differenceInSeconds","offsetInSeconds","getTimezoneOffsetInMilliseconds","minutes","Math","round","months","includeSeconds","minutesInDay","hours","minutesInMonth","days","differenceInMonths","nearestMonth","monthsSinceStartOfYear","years","trunc","formatDistanceToNow","_ref","log","activityType","description","timestamp","_jsxs","className","children","_jsx","toDate"],"sourceRoot":""}