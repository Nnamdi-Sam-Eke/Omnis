{"version":3,"file":"static/js/245.bbe33bc6.chunk.js","mappings":"2KAGA,MAsIA,2BAvHoBA,KAClB,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAWC,IAAgBJ,EAAAA,EAAAA,UAAS,OACpCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,MAkBnC,OACEO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAE7BF,EAAAA,EAAAA,MAAA,UAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,sDAAqDC,SAAC,2BAGpEF,EAAAA,EAAAA,MAAA,KAAGC,UAAU,gDAA+CC,SAAA,CAAC,2CACpBC,EAAAA,EAAAA,KAAA,SAAM,8CAKjDH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kCAAiCC,SAAA,EAE9CF,EAAAA,EAAAA,MAAA,QAAMI,SA/BSC,UACnBC,EAAEC,iBACFZ,GAAW,GACXE,EAAa,MACbE,EAAS,MAET,IACE,MAAMS,OA5BWjB,IACd,IAAIkB,SAASC,IAClBC,YAAW,KACTD,EAAQ,CACNE,gBAAiB,CACf,gBAAgBrB,8BAChB,gBAAgBA,4BAChB,gBAAgBA,6BAElBsB,WAAY,QACZ,GACD,IAAK,IAiBgBC,CAAcvB,GACpCM,EAAaW,EACf,CAAE,MAAOO,GACPhB,EAAS,+DACX,CAAC,QACCJ,GAAW,EACb,GAkBkCM,UAAU,4BAA2BC,SAAA,EACjEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mHAAkHC,UAC/HF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,8DAA6DC,SAAC,oBAI5EC,EAAAA,EAAAA,KAAA,SACEa,QAAQ,YACRf,UAAU,oEAAmEC,SAC9E,yBAGDC,EAAAA,EAAAA,KAAA,SACEc,GAAG,YACHC,KAAK,OACLC,MAAO5B,EACP6B,SAAWd,GAAMd,EAAac,EAAEe,OAAOF,OACvClB,UAAU,+IACVqB,YAAY,4CACZC,UAAQ,UAKdpB,EAAAA,EAAAA,KAAA,UACEe,KAAK,SACLjB,UAAU,oHAAmHC,SAE5HR,GACCS,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wFAAuFC,UACpGF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4CAA2CC,SAAA,EACxDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gGACfE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0HAInB,iBAKHP,IACCS,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wCAAuCC,SAAC,0BAKxDJ,IACCK,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uCAAsCC,SAClDJ,OAMNF,IAAcF,IACbM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mFAAkFC,SAAA,EAC/FC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,uCAAsCC,SAAC,wBAGrDC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,kCAAiCC,SAC5CN,EAAUgB,gBAAgBY,KAAI,CAACC,EAAMC,KACpCvB,EAAAA,EAAAA,KAAA,MAEEF,UAAU,2CAA0CC,SAEnDuB,GAHIC,QAOX1B,EAAAA,EAAAA,MAAA,KAAGC,UAAU,2CAA0CC,SAAA,CAAC,uBACjC,KACrBC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,gBAAeC,SAAEN,EAAUiB,wBAK/C,C","sources":["components/AI_Match.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// Simulated AI function to process user inputs and return recommendations\r\nconst mockAiProcess = (userInput) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        recommendations: [\r\n          `Match 1 for \"${userInput}\" - Optimize your approach`,\r\n          `Match 2 for \"${userInput}\" - Suggested adjustment`,\r\n          `Match 3 for \"${userInput}\" - Key improvement idea`,\r\n        ],\r\n        confidence: \"High\",\r\n      });\r\n    }, 2000);\r\n  });\r\n};\r\n\r\nconst AiMatchPage = () => {\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [aiResults, setAiResults] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setAiResults(null);\r\n    setError(null);\r\n\r\n    try {\r\n      const results = await mockAiProcess(userInput);\r\n      setAiResults(results);\r\n    } catch (err) {\r\n      setError(\"Something went wrong during AI processing. Please try again.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 space-y-10\">\r\n      {/* Page Header */}\r\n      <header>\r\n        <h1 className=\"text-3xl font-bold text-blue-600 dark:text-blue-300\">\r\n          Smart Recommendations\r\n        </h1>\r\n        <p className=\"text-gray-500 dark:text-gray-400 text-sm mt-1\">\r\n          AI-powered suggestions tailored to you.<br /> Coming soon: persona & prediction..\r\n        </p>\r\n      </header>\r\n\r\n      {/* Input + AI Results Flex Layout */}\r\n      <div className=\"flex flex-col md:flex-row gap-6\">\r\n        {/* Input Form */}\r\n        <form onSubmit={handleSubmit} className=\"w-full md:w-3/4 space-y-4\">\r\n          <div className=\"bg-white dark:bg-gray-800 shadow-lg hover:shadow-blue-500/50 rounded-lg p-6 border text-gray-900 dark:text-white\">\r\n            <div className=\"p-3 rounded-md\">\r\n              <h2 className=\"text-xl font-semibold text-blue-500 dark:text-blue-300 mb-4\">\r\n                Scenario Input\r\n              </h2>\r\n\r\n              <label\r\n                htmlFor=\"userInput\"\r\n                className=\"block text-sm font-medium text-green-700 dark:text-green-500 mb-1\"\r\n              >\r\n                Enter your criteria\r\n              </label>\r\n              <input\r\n                id=\"userInput\"\r\n                type=\"text\"\r\n                value={userInput}\r\n                onChange={(e) => setUserInput(e.target.value)}\r\n                className=\"w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:text-white\"\r\n                placeholder=\"E.g., 'Budget optimization for project X'\"\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 hover:scale-105 transition-all focus:outline-none\"\r\n          >\r\n            {loading ? (\r\n              <div className=\"fixed inset-0 bg-black transition bg-opacity-50 flex items-center justify-center z-50\">\r\n                <div className=\"relative flex items-center justify-center\">\r\n                  <div className=\"absolute w-16 h-16 border-8 border-blue-500 border-t-transparent rounded-full animate-spin\"></div>\r\n                  <div className=\" w-12 h-12 border-8 border-green-500 border-t-transparent rounded-full animate-[spin_1s_linear_reverse_infinite]\"></div>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              \"Get AI Match\"\r\n            )}\r\n          </button>\r\n\r\n          {/* Loading/Error Feedback */}\r\n          {loading && (\r\n            <div className=\"text-center text-blue-500 font-medium\">\r\n              Loading AI results...\r\n            </div>\r\n          )}\r\n\r\n          {error && (\r\n            <div className=\"text-center text-red-500 font-medium\">\r\n              {error}\r\n            </div>\r\n          )}\r\n        </form>\r\n\r\n        {/* AI Results */}\r\n        {aiResults && !loading && (\r\n          <div className=\"w-full md:w-3/4 bg-white dark:bg-gray-800 p-4 rounded-lg shadow border space-y-4\">\r\n            <h3 className=\"text-lg font-semibold text-green-500\">\r\n              AI Recommendations\r\n            </h3>\r\n            <ul className=\"list-disc list-inside space-y-2\">\r\n              {aiResults.recommendations.map((item, index) => (\r\n                <li\r\n                  key={index}\r\n                  className=\"text-gray-700 dark:text-gray-300 text-sm\"\r\n                >\r\n                  {item}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n              AI Confidence Level:{\" \"}\r\n              <span className=\"font-semibold\">{aiResults.confidence}</span>\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AiMatchPage;\r\n"],"names":["AiMatchPage","userInput","setUserInput","useState","loading","setLoading","aiResults","setAiResults","error","setError","_jsxs","className","children","_jsx","onSubmit","async","e","preventDefault","results","Promise","resolve","setTimeout","recommendations","confidence","mockAiProcess","err","htmlFor","id","type","value","onChange","target","placeholder","required","map","item","index"],"sourceRoot":""}