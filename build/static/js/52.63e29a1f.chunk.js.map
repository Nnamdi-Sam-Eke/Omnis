{"version":3,"file":"static/js/52.63e29a1f.chunk.js","mappings":"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","sources":["../node_modules/date-fns/_lib/format/longFormatters.js","../node_modules/date-fns/_lib/protectedTokens.js","../node_modules/date-fns/getDefaultOptions.js","../node_modules/date-fns/transpose.js","../node_modules/date-fns/parse/_lib/Setter.js","../node_modules/date-fns/parse/_lib/Parser.js","../node_modules/date-fns/parse/_lib/constants.js","../node_modules/date-fns/parse/_lib/utils.js","../node_modules/date-fns/startOfWeek.js","../node_modules/date-fns/getWeekYear.js","../node_modules/date-fns/startOfISOWeek.js","../node_modules/date-fns/startOfWeekYear.js","../node_modules/date-fns/getWeek.js","../node_modules/date-fns/setWeek.js","../node_modules/date-fns/getISOWeekYear.js","../node_modules/date-fns/startOfISOWeekYear.js","../node_modules/date-fns/getISOWeek.js","../node_modules/date-fns/setISOWeek.js","../node_modules/date-fns/parse/_lib/parsers/DateParser.js","../node_modules/date-fns/addDays.js","../node_modules/date-fns/setDay.js","../node_modules/date-fns/getISODay.js","../node_modules/date-fns/setISODay.js","../node_modules/date-fns/parse/_lib/parsers.js","../node_modules/date-fns/parse/_lib/parsers/EraParser.js","../node_modules/date-fns/parse/_lib/parsers/YearParser.js","../node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js","../node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.js","../node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.js","../node_modules/date-fns/parse/_lib/parsers/QuarterParser.js","../node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js","../node_modules/date-fns/parse/_lib/parsers/MonthParser.js","../node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js","../node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.js","../node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.js","../node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.js","../node_modules/date-fns/parse/_lib/parsers/DayParser.js","../node_modules/date-fns/parse/_lib/parsers/LocalDayParser.js","../node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.js","../node_modules/date-fns/parse/_lib/parsers/ISODayParser.js","../node_modules/date-fns/parse/_lib/parsers/AMPMParser.js","../node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.js","../node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js","../node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js","../node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.js","../node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.js","../node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.js","../node_modules/date-fns/parse/_lib/parsers/MinuteParser.js","../node_modules/date-fns/parse/_lib/parsers/SecondParser.js","../node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.js","../node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js","../node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js","../node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js","../node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.js","../node_modules/date-fns/parse.js","../node_modules/date-fns/parseISO.js","../node_modules/date-fns/isDate.js","../node_modules/date-fns/isValid.js","../node_modules/date-fns/startOfDay.js","../node_modules/date-fns/differenceInCalendarDays.js","../node_modules/date-fns/startOfYear.js","../node_modules/date-fns/getDayOfYear.js","../node_modules/date-fns/_lib/addLeadingZeros.js","../node_modules/date-fns/_lib/format/lightFormatters.js","../node_modules/date-fns/_lib/format/formatters.js","../node_modules/date-fns/format.js","../node_modules/date-fns/addMilliseconds.js","../node_modules/date-fns/addSeconds.js","../node_modules/date-fns/addMinutes.js","../node_modules/date-fns/addHours.js","../node_modules/date-fns/addWeeks.js","../node_modules/date-fns/addMonths.js","../node_modules/date-fns/addQuarters.js","../node_modules/date-fns/addYears.js","../node_modules/date-fns/differenceInMinutes.js","../node_modules/date-fns/differenceInHours.js","../node_modules/date-fns/differenceInDays.js","../node_modules/date-fns/differenceInWeeks.js","../node_modules/date-fns/differenceInQuarters.js","../node_modules/date-fns/differenceInCalendarYears.js","../node_modules/date-fns/differenceInYears.js","../node_modules/date-fns/startOfSecond.js","../node_modules/date-fns/startOfMinute.js","../node_modules/date-fns/startOfHour.js","../node_modules/date-fns/startOfMonth.js","../node_modules/date-fns/startOfQuarter.js","../node_modules/date-fns/endOfSecond.js","../node_modules/date-fns/endOfMinute.js","../node_modules/date-fns/endOfHour.js","../node_modules/date-fns/endOfWeek.js","../node_modules/date-fns/endOfQuarter.js","../node_modules/date-fns/endOfYear.js","../node_modules/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.esm.js","../node_modules/react-chartjs-2/src/utils.ts","../node_modules/react-chartjs-2/src/chart.tsx","../node_modules/react-chartjs-2/src/typedCharts.tsx"],"sourcesContent":["const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","import { getDefaultOptions as getInternalDefaultOptions } from \"./_lib/defaultOptions.js\";\n\n/**\n * @name getDefaultOptions\n * @category Common Helpers\n * @summary Get default options.\n * @pure false\n *\n * @description\n * Returns an object that contains defaults for\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\n * arguments for all functions.\n *\n * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).\n *\n * @returns The default options\n *\n * @example\n * const result = getDefaultOptions()\n * //=> {}\n *\n * @example\n * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })\n * const result = getDefaultOptions()\n * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }\n */\nexport function getDefaultOptions() {\n  return Object.assign({}, getInternalDefaultOptions());\n}\n\n// Fallback for modularized imports:\nexport default getDefaultOptions;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name transpose\n * @category Generic Helpers\n * @summary Transpose the date to the given constructor.\n *\n * @description\n * The function transposes the date to the given constructor. It helps you\n * to transpose the date in the system time zone to say `UTCDate` or any other\n * date extension.\n *\n * @typeParam InputDate - The input `Date` type derived from the passed argument.\n * @typeParam ResultDate - The result `Date` type derived from the passed constructor.\n *\n * @param date - The date to use values from\n * @param constructor - The date constructor to use\n *\n * @returns Date transposed to the given constructor\n *\n * @example\n * // Create July 10, 2022 00:00 in locale time zone\n * const date = new Date(2022, 6, 10)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'\n *\n * @example\n * // Transpose the date to July 10, 2022 00:00 in UTC\n * transpose(date, UTCDate)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'\n */\nexport function transpose(date, constructor) {\n  const date_ = isConstructor(constructor)\n    ? new constructor(0)\n    : constructFrom(constructor, 0);\n  date_.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n  date_.setHours(\n    date.getHours(),\n    date.getMinutes(),\n    date.getSeconds(),\n    date.getMilliseconds(),\n  );\n  return date_;\n}\n\nfunction isConstructor(constructor) {\n  return (\n    typeof constructor === \"function\" &&\n    constructor.prototype?.constructor === constructor\n  );\n}\n\n// Fallback for modularized imports:\nexport default transpose;\n","import { constructFrom } from \"../../constructFrom.js\";\nimport { transpose } from \"../../transpose.js\";\n\nconst TIMEZONE_UNIT_PRIORITY = 10;\n\nexport class Setter {\n  subPriority = 0;\n\n  validate(_utcDate, _options) {\n    return true;\n  }\n}\n\nexport class ValueSetter extends Setter {\n  constructor(\n    value,\n\n    validateValue,\n\n    setValue,\n\n    priority,\n    subPriority,\n  ) {\n    super();\n    this.value = value;\n    this.validateValue = validateValue;\n    this.setValue = setValue;\n    this.priority = priority;\n    if (subPriority) {\n      this.subPriority = subPriority;\n    }\n  }\n\n  validate(date, options) {\n    return this.validateValue(date, this.value, options);\n  }\n\n  set(date, flags, options) {\n    return this.setValue(date, flags, this.value, options);\n  }\n}\n\nexport class DateTimezoneSetter extends Setter {\n  priority = TIMEZONE_UNIT_PRIORITY;\n  subPriority = -1;\n\n  constructor(context, reference) {\n    super();\n    this.context = context || ((date) => constructFrom(reference, date));\n  }\n\n  set(date, flags) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(date, transpose(date, this.context));\n  }\n}\n","import { ValueSetter } from \"./Setter.js\";\n\nexport class Parser {\n  run(dateString, token, match, options) {\n    const result = this.parse(dateString, token, match, options);\n    if (!result) {\n      return null;\n    }\n\n    return {\n      setter: new ValueSetter(\n        result.value,\n        this.validate,\n        this.set,\n        this.priority,\n        this.subPriority,\n      ),\n      rest: result.rest,\n    };\n  }\n\n  validate(_utcDate, _value, _options) {\n    return true;\n  }\n}\n","export const numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/, // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/, // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/, // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/, // 0 to 12\n  minute: /^[0-5]?\\d/, // 0 to 59\n  second: /^[0-5]?\\d/, // 0 to 59\n\n  singleDigit: /^\\d/, // 0 to 9\n  twoDigits: /^\\d{1,2}/, // 0 to 99\n  threeDigits: /^\\d{1,3}/, // 0 to 999\n  fourDigits: /^\\d{1,4}/, // 0 to 9999\n\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/, // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/, // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/, // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/, // 0 to 9999, -0 to -9999\n};\n\nexport const timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/,\n};\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n  millisecondsInSecond,\n} from \"../../constants.js\";\n\nimport { numericPatterns } from \"./constants.js\";\n\nexport function mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest,\n  };\n}\n\nexport function parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === \"Z\") {\n    return {\n      value: 0,\n      rest: dateString.slice(1),\n    };\n  }\n\n  const sign = matchResult[1] === \"+\" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value:\n      sign *\n      (hours * millisecondsInHour +\n        minutes * millisecondsInMinute +\n        seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\n\nexport function parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case \"morning\":\n      return 4;\n    case \"evening\":\n      return 17;\n    case \"pm\":\n    case \"noon\":\n    case \"afternoon\":\n      return 12;\n    case \"am\":\n    case \"midnight\":\n    case \"night\":\n    default:\n      return 0;\n  }\n}\n\nexport function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  let result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nexport function isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getWeekYear } from \"./getWeekYear.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { startOfWeekYear } from \"./startOfWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\nexport function getWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","import { getWeek } from \"./getWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setWeek} function options.\n */\n\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param week - The week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week set\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * const result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * const result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\nexport function setWeek(date, week, options) {\n  const date_ = toDate(date, options?.in);\n  const diff = getWeek(date_, options) - week;\n  date_.setDate(date_.getDate() - diff * 7);\n  return toDate(date_, options?.in);\n}\n\n// Fallback for modularized imports:\nexport default setWeek;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { getISOWeekYear } from \"./getISOWeekYear.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { getISOWeek } from \"./getISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setISOWeek} function options.\n */\n\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The `Date` type of the context function.\n *\n * @param date - The date to be changed\n * @param week - The ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the ISO week set\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * const result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\nexport function setISOWeek(date, week, options) {\n  const _date = toDate(date, options?.in);\n  const diff = getISOWeek(_date, options) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setISOWeek;\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.js\";\n\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [\n  31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n];\n\n// Day of the month\nexport class DateParser extends Parser {\n  priority = 90;\n  subPriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"d\":\n        return parseNumericPattern(numericPatterns.date, dateString);\n      case \"do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    const month = date.getMonth();\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setDate(value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { addDays } from \"./addDays.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setDay} function options.\n */\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the week of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the day of the week set\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * const result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setDay(date, day, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const date_ = toDate(date, options?.in);\n  const currentDay = date_.getDay();\n\n  const remainder = day % 7;\n  const dayIndex = (remainder + 7) % 7;\n\n  const delta = 7 - weekStartsOn;\n  const diff =\n    day < 0 || day > 6\n      ? day - ((currentDay + delta) % 7)\n      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setDay;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISODay} function options.\n */\n\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The day of ISO week\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * const result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\nexport function getISODay(date, options) {\n  const day = toDate(date, options?.in).getDay();\n  return day === 0 ? 7 : day;\n}\n\n// Fallback for modularized imports:\nexport default getISODay;\n","import { addDays } from \"./addDays.js\";\nimport { getISODay } from \"./getISODay.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setISODay} function options.\n */\n\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday, etc.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the day of the ISO week set\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * const result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setISODay(date, day, options) {\n  const date_ = toDate(date, options?.in);\n  const currentDay = getISODay(date_, options);\n  const diff = day - currentDay;\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setISODay;\n","import { EraParser } from \"./parsers/EraParser.js\";\nimport { YearParser } from \"./parsers/YearParser.js\";\nimport { LocalWeekYearParser } from \"./parsers/LocalWeekYearParser.js\";\nimport { ISOWeekYearParser } from \"./parsers/ISOWeekYearParser.js\";\nimport { ExtendedYearParser } from \"./parsers/ExtendedYearParser.js\";\nimport { QuarterParser } from \"./parsers/QuarterParser.js\";\nimport { StandAloneQuarterParser } from \"./parsers/StandAloneQuarterParser.js\";\nimport { MonthParser } from \"./parsers/MonthParser.js\";\nimport { StandAloneMonthParser } from \"./parsers/StandAloneMonthParser.js\";\nimport { LocalWeekParser } from \"./parsers/LocalWeekParser.js\";\nimport { ISOWeekParser } from \"./parsers/ISOWeekParser.js\";\nimport { DateParser } from \"./parsers/DateParser.js\";\nimport { DayOfYearParser } from \"./parsers/DayOfYearParser.js\";\nimport { DayParser } from \"./parsers/DayParser.js\";\nimport { LocalDayParser } from \"./parsers/LocalDayParser.js\";\nimport { StandAloneLocalDayParser } from \"./parsers/StandAloneLocalDayParser.js\";\nimport { ISODayParser } from \"./parsers/ISODayParser.js\";\nimport { AMPMParser } from \"./parsers/AMPMParser.js\";\nimport { AMPMMidnightParser } from \"./parsers/AMPMMidnightParser.js\";\nimport { DayPeriodParser } from \"./parsers/DayPeriodParser.js\";\nimport { Hour1to12Parser } from \"./parsers/Hour1to12Parser.js\";\nimport { Hour0to23Parser } from \"./parsers/Hour0to23Parser.js\";\nimport { Hour0To11Parser } from \"./parsers/Hour0To11Parser.js\";\nimport { Hour1To24Parser } from \"./parsers/Hour1To24Parser.js\";\nimport { MinuteParser } from \"./parsers/MinuteParser.js\";\nimport { SecondParser } from \"./parsers/SecondParser.js\";\nimport { FractionOfSecondParser } from \"./parsers/FractionOfSecondParser.js\";\nimport { ISOTimezoneWithZParser } from \"./parsers/ISOTimezoneWithZParser.js\";\nimport { ISOTimezoneParser } from \"./parsers/ISOTimezoneParser.js\";\nimport { TimestampSecondsParser } from \"./parsers/TimestampSecondsParser.js\";\nimport { TimestampMillisecondsParser } from \"./parsers/TimestampMillisecondsParser.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\nexport const parsers = {\n  G: new EraParser(),\n  y: new YearParser(),\n  Y: new LocalWeekYearParser(),\n  R: new ISOWeekYearParser(),\n  u: new ExtendedYearParser(),\n  Q: new QuarterParser(),\n  q: new StandAloneQuarterParser(),\n  M: new MonthParser(),\n  L: new StandAloneMonthParser(),\n  w: new LocalWeekParser(),\n  I: new ISOWeekParser(),\n  d: new DateParser(),\n  D: new DayOfYearParser(),\n  E: new DayParser(),\n  e: new LocalDayParser(),\n  c: new StandAloneLocalDayParser(),\n  i: new ISODayParser(),\n  a: new AMPMParser(),\n  b: new AMPMMidnightParser(),\n  B: new DayPeriodParser(),\n  h: new Hour1to12Parser(),\n  H: new Hour0to23Parser(),\n  K: new Hour0To11Parser(),\n  k: new Hour1To24Parser(),\n  m: new MinuteParser(),\n  s: new SecondParser(),\n  S: new FractionOfSecondParser(),\n  X: new ISOTimezoneWithZParser(),\n  x: new ISOTimezoneParser(),\n  t: new TimestampSecondsParser(),\n  T: new TimestampMillisecondsParser(),\n};\n","import { Parser } from \"../Parser.js\";\n\nexport class EraParser extends Parser {\n  priority = 140;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return (\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n\n      // A, B\n      case \"GGGGG\":\n        return match.era(dateString, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return (\n          match.era(dateString, { width: \"wide\" }) ||\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n    }\n  }\n\n  set(date, flags, value) {\n    flags.era = value;\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"R\", \"u\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nexport class YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { getWeekYear } from \"../../../getWeekYear.js\";\n\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// Local week-numbering year\nexport class LocalWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"YY\",\n    });\n\n    switch (token) {\n      case \"Y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"Yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(\n        normalizedTwoDigitYear,\n        0,\n        options.firstWeekContainsDate,\n      );\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { startOfISOWeek } from \"../../../startOfISOWeek.js\";\nimport { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigitsSigned } from \"../utils.js\";\n\n// ISO week-numbering year\nexport class ISOWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"R\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    const firstWeekOfYear = constructFrom(date, 0);\n    firstWeekOfYear.setFullYear(value, 0, 4);\n    firstWeekOfYear.setHours(0, 0, 0, 0);\n    return startOfISOWeek(firstWeekOfYear);\n  }\n\n  incompatibleTokens = [\n    \"G\",\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigitsSigned } from \"../utils.js\";\n\nexport class ExtendedYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"u\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"G\", \"y\", \"Y\", \"R\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class QuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n      case \"QQ\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class StandAloneQuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class MonthParser extends Parser {\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"MM\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // J, F, ..., D\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class StandAloneMonthParser extends Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"LL\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // J, F, ..., D\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setWeek } from \"../../../setWeek.js\";\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\n// Local week of year\nexport class LocalWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"w\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"wo\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value, options) {\n    return startOfWeek(setWeek(date, value, options), options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setISOWeek } from \"../../../setISOWeek.js\";\nimport { startOfISOWeek } from \"../../../startOfISOWeek.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\n// ISO week of year\nexport class ISOWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"I\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"Io\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value) {\n    return startOfISOWeek(setISOWeek(date, value));\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.js\";\n\nexport class DayOfYearParser extends Parser {\n  priority = 90;\n\n  subpriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"D\":\n      case \"DD\":\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n      case \"Do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(0, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\n// Day of week\nexport class DayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"EEEEE\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// Local day of week\nexport class LocalDayParser extends Parser {\n  priority = 90;\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"e\":\n      case \"ee\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"eo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"eee\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"eeeee\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"eeee\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// Stand-alone local day of week\nexport class StandAloneLocalDayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"c\":\n      case \"cc\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"co\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"ccc\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // T\n      case \"ccccc\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // Tuesday\n      case \"cccc\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setISODay } from \"../../../setISODay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// ISO day of week\nexport class ISODayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => {\n      if (value === 0) {\n        return 7;\n      }\n      return value;\n    };\n\n    switch (token) {\n      // 2\n      case \"i\":\n      case \"ii\": // 02\n        return parseNDigits(token.length, dateString);\n      // 2nd\n      case \"io\":\n        return match.ordinalNumber(dateString, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // T\n      case \"iiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          }),\n          valueCallback,\n        );\n      // Tu\n      case \"iiiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"short\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // Tuesday\n      case \"iiii\":\n      default:\n        return mapValue(\n          match.day(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"abbreviated\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 7;\n  }\n\n  set(date, _flags, value) {\n    date = setISODay(date, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\nexport class AMPMParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n      case \"aaa\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"aaaaa\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"b\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\nexport class AMPMMidnightParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n      case \"bbb\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"bbbbb\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\n// in the morning, in the afternoon, in the evening, at night\nexport class DayPeriodParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"BBBBB\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"h\":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n      case \"ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"H\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour0to23Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"H\":\n        return parseNumericPattern(numericPatterns.hour23h, dateString);\n      case \"Ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 23;\n  }\n\n  set(date, _flags, value) {\n    date.setHours(value, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour0To11Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"K\":\n        return parseNumericPattern(numericPatterns.hour11h, dateString);\n      case \"Ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"h\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1To24Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"k\":\n        return parseNumericPattern(numericPatterns.hour24h, dateString);\n      case \"ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 24;\n  }\n\n  set(date, _flags, value) {\n    const hours = value <= 24 ? value % 24 : value;\n    date.setHours(hours, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"H\", \"K\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class MinuteParser extends Parser {\n  priority = 60;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"m\":\n        return parseNumericPattern(numericPatterns.minute, dateString);\n      case \"mo\":\n        return match.ordinalNumber(dateString, { unit: \"minute\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setMinutes(value, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class SecondParser extends Parser {\n  priority = 50;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"s\":\n        return parseNumericPattern(numericPatterns.second, dateString);\n      case \"so\":\n        return match.ordinalNumber(dateString, { unit: \"second\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setSeconds(value, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\nexport class FractionOfSecondParser extends Parser {\n  priority = 30;\n\n  parse(dateString, token) {\n    const valueCallback = (value) =>\n      Math.trunc(value * Math.pow(10, -token.length + 3));\n    return mapValue(parseNDigits(token.length, dateString), valueCallback);\n  }\n\n  set(date, _flags, value) {\n    date.setMilliseconds(value);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601. +00:00 is `'Z'`)\nexport class ISOTimezoneWithZParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"X\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"XX\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"XXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"XXXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"XXX\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"x\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601)\nexport class ISOTimezoneParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"x\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"xx\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"xxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"xxxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"xxx\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"X\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseAnyDigitsSigned } from \"../utils.js\";\n\nexport class TimestampSecondsParser extends Parser {\n  priority = 40;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value * 1000), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseAnyDigitsSigned } from \"../utils.js\";\n\nexport class TimestampMillisecondsParser extends Parser {\n  priority = 20;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getDefaultOptions } from \"./getDefaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\nimport { DateTimezoneSetter } from \"./parse/_lib/Setter.js\";\nimport { parsers } from \"./parse/_lib/parsers.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { longFormatters, parsers };\n\n/**\n * The {@link parse} function options.\n */\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\n\nconst notWhitespaceRegExp = /\\S/;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangeably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)\n *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 7. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param dateStr - The string to parse\n * @param formatStr - The string of tokens\n * @param referenceDate - defines values missing from the parsed dateString\n * @param options - An object with options.\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @returns The parsed date\n *\n * @throws `options.locale` must contain `match` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\nexport function parse(dateStr, formatStr, referenceDate, options) {\n  const invalidDate = () => constructFrom(options?.in || referenceDate, NaN);\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  if (!formatStr)\n    return dateStr ? invalidDate() : toDate(referenceDate, options?.in);\n\n  const subFnOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  // If timezone isn't specified, it will try to use the context or\n  // the reference date and fallback to the system time zone.\n  const setters = [new DateTimezoneSetter(options?.in, referenceDate)];\n\n  const tokens = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter in longFormatters) {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp);\n\n  const usedTokens = [];\n\n  for (let token of tokens) {\n    if (\n      !options?.useAdditionalWeekYearTokens &&\n      isProtectedWeekYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n    if (\n      !options?.useAdditionalDayOfYearTokens &&\n      isProtectedDayOfYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n\n    const firstCharacter = token[0];\n    const parser = parsers[firstCharacter];\n    if (parser) {\n      const { incompatibleTokens } = parser;\n      if (Array.isArray(incompatibleTokens)) {\n        const incompatibleToken = usedTokens.find(\n          (usedToken) =>\n            incompatibleTokens.includes(usedToken.token) ||\n            usedToken.token === firstCharacter,\n        );\n        if (incompatibleToken) {\n          throw new RangeError(\n            `The format string mustn't contain \\`${incompatibleToken.fullToken}\\` and \\`${token}\\` at the same time`,\n          );\n        }\n      } else if (parser.incompatibleTokens === \"*\" && usedTokens.length > 0) {\n        throw new RangeError(\n          `The format string mustn't contain \\`${token}\\` and any other token at the same time`,\n        );\n      }\n\n      usedTokens.push({ token: firstCharacter, fullToken: token });\n\n      const parseResult = parser.run(\n        dateStr,\n        token,\n        locale.match,\n        subFnOptions,\n      );\n\n      if (!parseResult) {\n        return invalidDate();\n      }\n\n      setters.push(parseResult.setter);\n\n      dateStr = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      // Replace two single quote characters with one single quote character\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      }\n\n      // Cut token from string, or, if string doesn't match the token, return Invalid Date\n      if (dateStr.indexOf(token) === 0) {\n        dateStr = dateStr.slice(token.length);\n      } else {\n        return invalidDate();\n      }\n    }\n  }\n\n  // Check if the remaining input contains something other than whitespace\n  if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {\n    return invalidDate();\n  }\n\n  const uniquePrioritySetters = setters\n    .map((setter) => setter.priority)\n    .sort((a, b) => b - a)\n    .filter((priority, index, array) => array.indexOf(priority) === index)\n    .map((priority) =>\n      setters\n        .filter((setter) => setter.priority === priority)\n        .sort((a, b) => b.subPriority - a.subPriority),\n    )\n    .map((setterArray) => setterArray[0]);\n\n  let date = toDate(referenceDate, options?.in);\n\n  if (isNaN(+date)) return invalidDate();\n\n  const flags = {};\n  for (const setter of uniquePrioritySetters) {\n    if (!setter.validate(date, subFnOptions)) {\n      return invalidDate();\n    }\n\n    const result = setter.set(date, flags, subFnOptions);\n    // Result is tuple (date, flags)\n    if (Array.isArray(result)) {\n      date = result[0];\n      Object.assign(flags, result[1]);\n      // Result is date\n    } else {\n      date = result;\n    }\n  }\n\n  return date;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default parse;\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n} from \"./constants.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link parseISO} function options.\n */\n\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n * @param options - An object with options\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function parseISO(argument, options) {\n  const invalidDate = () => constructFrom(options?.in, NaN);\n\n  const additionalDigits = options?.additionalDigits ?? 2;\n  const dateStrings = splitDateString(argument);\n\n  let date;\n  if (dateStrings.date) {\n    const parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(+date)) return invalidDate();\n\n  const timestamp = +date;\n  let time = 0;\n  let offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time)) return invalidDate();\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) return invalidDate();\n  } else {\n    const tmpDate = new Date(timestamp + time);\n    const result = toDate(0, options?.in);\n    result.setFullYear(\n      tmpDate.getUTCFullYear(),\n      tmpDate.getUTCMonth(),\n      tmpDate.getUTCDate(),\n    );\n    result.setHours(\n      tmpDate.getUTCHours(),\n      tmpDate.getUTCMinutes(),\n      tmpDate.getUTCSeconds(),\n      tmpDate.getUTCMilliseconds(),\n    );\n    return result;\n  }\n\n  return toDate(timestamp + time + offset, options?.in);\n}\n\nconst patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/,\n};\n\nconst dateRegex =\n  /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nconst timeRegex =\n  /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nconst timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  const dateStrings = {};\n  const array = dateString.split(patterns.dateTimeDelimiter);\n  let timeString;\n\n  // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(\n        dateStrings.date.length,\n        dateString.length,\n      );\n    }\n  }\n\n  if (timeString) {\n    const token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], \"\");\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  const regex = new RegExp(\n    \"^(?:(\\\\d{4}|[+-]\\\\d{\" +\n      (4 + additionalDigits) +\n      \"})|(\\\\d{2}|[+-]\\\\d{\" +\n      (2 + additionalDigits) +\n      \"})$)\",\n  );\n\n  const captures = dateString.match(regex);\n  // Invalid ISO-formatted year\n  if (!captures) return { year: NaN, restDateString: \"\" };\n\n  const year = captures[1] ? parseInt(captures[1]) : null;\n  const century = captures[2] ? parseInt(captures[2]) : null;\n\n  // either year or century is null, not both\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length),\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n\n  const captures = dateString.match(dateRegex);\n  // Invalid ISO-formatted string\n  if (!captures) return new Date(NaN);\n\n  const isWeekDate = !!captures[4];\n  const dayOfYear = parseDateUnit(captures[1]);\n  const month = parseDateUnit(captures[2]) - 1;\n  const day = parseDateUnit(captures[3]);\n  const week = parseDateUnit(captures[4]);\n  const dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    const date = new Date(0);\n    if (\n      !validateDate(year, month, day) ||\n      !validateDayOfYearDate(year, dayOfYear)\n    ) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  const captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  const hours = parseTimeUnit(captures[1]);\n  const minutes = parseTimeUnit(captures[2]);\n  const seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return (\n    hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000\n  );\n}\n\nfunction parseTimeUnit(value) {\n  return (value && parseFloat(value.replace(\",\", \".\"))) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === \"Z\") return 0;\n\n  const captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n\n  const sign = captures[1] === \"+\" ? -1 : 1;\n  const hours = parseInt(captures[2]);\n  const minutes = (captures[3] && parseInt(captures[3])) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  const date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  const fourthOfJanuaryDay = date.getUTCDay() || 7;\n  const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n\n// Validation functions\n\n// February is null to handle the leap year (using ||)\nconst daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n\nfunction validateDate(year, month, date) {\n  return (\n    month >= 0 &&\n    month <= 11 &&\n    date >= 1 &&\n    date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28))\n  );\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return (\n    seconds >= 0 &&\n    seconds < 60 &&\n    minutes >= 0 &&\n    minutes < 60 &&\n    hours >= 0 &&\n    hours < 25\n  );\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}\n\n// Fallback for modularized imports:\nexport default parseISO;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { startOfYear } from \"./startOfYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.js\";\nimport { getISOWeek } from \"../../getISOWeek.js\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.js\";\nimport { getWeek } from \"../../getWeek.js\";\nimport { getWeekYear } from \"../../getWeekYear.js\";\n\nimport { addLeadingZeros } from \"../addLeadingZeros.js\";\nimport { lightFormatters } from \"./lightFormatters.js\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { formatters } from \"./_lib/format/formatters.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMilliseconds} function options.\n */\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of milliseconds to be added.\n * @param options - The options object\n *\n * @returns The new date with the milliseconds added\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nexport function addMilliseconds(date, amount, options) {\n  return constructFrom(options?.in || date, +toDate(date) + amount);\n}\n\n// Fallback for modularized imports:\nexport default addMilliseconds;\n","import { addMilliseconds } from \"./addMilliseconds.js\";\n\n/**\n * The {@link addSeconds} function options.\n */\n\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of seconds to be added.\n * @param options - An object with options\n *\n * @returns The new date with the seconds added\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\nexport function addSeconds(date, amount, options) {\n  return addMilliseconds(date, amount * 1000, options);\n}\n\n// Fallback for modularized imports:\nexport default addSeconds;\n","import { millisecondsInMinute } from \"./constants.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMinutes} function options.\n */\n\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of minutes to be added.\n * @param options - An object with options\n *\n * @returns The new date with the minutes added\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\nexport function addMinutes(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  _date.setTime(_date.getTime() + amount * millisecondsInMinute);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addMinutes;\n","import { addMilliseconds } from \"./addMilliseconds.js\";\nimport { millisecondsInHour } from \"./constants.js\";\n\n/**\n * The {@link addHours} function options.\n */\n\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be added\n * @param options - An object with options\n *\n * @returns The new date with the hours added\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\nexport function addHours(date, amount, options) {\n  return addMilliseconds(date, amount * millisecondsInHour, options);\n}\n\n// Fallback for modularized imports:\nexport default addHours;\n","import { addDays } from \"./addDays.js\";\n\n/**\n * The {@link addWeeks} function options.\n */\n\n/**\n * @name addWeeks\n * @category Week Helpers\n * @summary Add the specified number of weeks to the given date.\n *\n * @description\n * Add the specified number of weeks to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of weeks to be added.\n * @param options - An object with options\n *\n * @returns The new date with the weeks added\n *\n * @example\n * // Add 4 weeks to 1 September 2014:\n * const result = addWeeks(new Date(2014, 8, 1), 4)\n * //=> Mon Sep 29 2014 00:00:00\n */\nexport function addWeeks(date, amount, options) {\n  return addDays(date, amount * 7, options);\n}\n\n// Fallback for modularized imports:\nexport default addWeeks;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMonths} function options.\n */\n\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of months to be added.\n * @param options - The options object\n *\n * @returns The new date with the months added\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n *\n * // Add one month to 30 January 2023:\n * const result = addMonths(new Date(2023, 0, 30), 1)\n * //=> Tue Feb 28 2023 00:00:00\n */\nexport function addMonths(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  const dayOfMonth = _date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  const endOfDesiredMonth = constructFrom(options?.in || date, _date.getTime());\n  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);\n  const daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    _date.setFullYear(\n      endOfDesiredMonth.getFullYear(),\n      endOfDesiredMonth.getMonth(),\n      dayOfMonth,\n    );\n    return _date;\n  }\n}\n\n// Fallback for modularized imports:\nexport default addMonths;\n","import { addMonths } from \"./addMonths.js\";\n\n/**\n * The {@link addQuarters} function options.\n */\n\n/**\n * @name addQuarters\n * @category Quarter Helpers\n * @summary Add the specified number of year quarters to the given date.\n *\n * @description\n * Add the specified number of year quarters to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of quarters to be added.\n * @param options - An object with options\n *\n * @returns The new date with the quarters added\n *\n * @example\n * // Add 1 quarter to 1 September 2014:\n * const result = addQuarters(new Date(2014, 8, 1), 1)\n * //=; Mon Dec 01 2014 00:00:00\n */\nexport function addQuarters(date, amount, options) {\n  return addMonths(date, amount * 3, options);\n}\n\n// Fallback for modularized imports:\nexport default addQuarters;\n","import { addMonths } from \"./addMonths.js\";\n\n/**\n * The {@link addYears} function options.\n */\n\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The date to be changed\n * @param amount - The amount of years to be added.\n * @param options - The options\n *\n * @returns The new date with the years added\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\nexport function addYears(date, amount, options) {\n  return addMonths(date, amount * 12, options);\n}\n\n// Fallback for modularized imports:\nexport default addYears;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { millisecondsInMinute } from \"./constants.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInMinutes} function options.\n */\n\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of minutes\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\nexport function differenceInMinutes(dateLeft, dateRight, options) {\n  const diff =\n    differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMinutes;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInHour } from \"./constants.js\";\n\n/**\n * The {@link differenceInHours} function options.\n */\n\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of hours\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\nexport function differenceInHours(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  const diff = (+laterDate_ - +earlierDate_) / millisecondsInHour;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInHours;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\n\n/**\n * The {@link differenceInDays} function options.\n */\n\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full days according to the local timezone\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n *\n * @example\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n * //=> 92\n */\nexport function differenceInDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const sign = compareLocalAsc(laterDate_, earlierDate_);\n  const difference = Math.abs(\n    differenceInCalendarDays(laterDate_, earlierDate_),\n  );\n\n  laterDate_.setDate(laterDate_.getDate() - sign * difference);\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastDayNotFull = Number(\n    compareLocalAsc(laterDate_, earlierDate_) === -sign,\n  );\n\n  const result = sign * (difference - isLastDayNotFull);\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(laterDate, earlierDate) {\n  const diff =\n    laterDate.getFullYear() - earlierDate.getFullYear() ||\n    laterDate.getMonth() - earlierDate.getMonth() ||\n    laterDate.getDate() - earlierDate.getDate() ||\n    laterDate.getHours() - earlierDate.getHours() ||\n    laterDate.getMinutes() - earlierDate.getMinutes() ||\n    laterDate.getSeconds() - earlierDate.getSeconds() ||\n    laterDate.getMilliseconds() - earlierDate.getMilliseconds();\n\n  if (diff < 0) return -1;\n  if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInDays;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInDays } from \"./differenceInDays.js\";\n\n/**\n * The {@link differenceInWeeks} function options.\n */\n\n/**\n * @name differenceInWeeks\n * @category Week Helpers\n * @summary Get the number of full weeks between the given dates.\n *\n * @description\n * Get the number of full weeks between two dates. Fractional weeks are\n * truncated towards zero by default.\n *\n * One \"full week\" is the distance between a local time in one day to the same\n * local time 7 days earlier or later. A full week can sometimes be less than\n * or more than 7*24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full weeks\n *\n * @example\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\n * //=> 2\n *\n * @example\n * // How many full weeks are between\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 8 weeks (54 days),\n * // even if DST starts and the period has\n * // only 54*24-1 hours.\n * const result = differenceInWeeks(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 6)\n * )\n * //=> 8\n */\nexport function differenceInWeeks(laterDate, earlierDate, options) {\n  const diff = differenceInDays(laterDate, earlierDate, options) / 7;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInWeeks;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInMonths } from \"./differenceInMonths.js\";\n\n/**\n * The {@link differenceInQuarters} function options.\n */\n\n/**\n * @name differenceInQuarters\n * @category Quarter Helpers\n * @summary Get the number of quarters between the given dates.\n *\n * @description\n * Get the number of quarters between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of full quarters\n *\n * @example\n * // How many full quarters are between 31 December 2013 and 2 July 2014?\n * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))\n * //=> 2\n */\nexport function differenceInQuarters(laterDate, earlierDate, options) {\n  const diff = differenceInMonths(laterDate, earlierDate, options) / 3;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInQuarters;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link differenceInCalendarYears} function options.\n */\n\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n\n * @returns The number of calendar years\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * );\n * //=> 2\n */\nexport function differenceInCalendarYears(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  return laterDate_.getFullYear() - earlierDate_.getFullYear();\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarYears;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { differenceInCalendarYears } from \"./differenceInCalendarYears.js\";\n\n/**\n * The {@link differenceInYears} function options.\n */\n\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full years\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\nexport function differenceInYears(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  // -1 if the left date is earlier than the right date\n  // 2023-12-31 - 2024-01-01 = -1\n  const sign = compareAsc(laterDate_, earlierDate_);\n\n  // First calculate the difference in calendar years\n  // 2024-01-01 - 2023-12-31 = 1 year\n  const diff = Math.abs(differenceInCalendarYears(laterDate_, earlierDate_));\n\n  // Now we need to calculate if the difference is full. To do that we set\n  // both dates to the same year and check if the both date's month and day\n  // form a full year.\n  laterDate_.setFullYear(1584);\n  earlierDate_.setFullYear(1584);\n\n  // For it to be true, when the later date is indeed later than the earlier date\n  // (2026-02-01 - 2023-12-10 = 3 years), the difference is full if\n  // the normalized later date is also later than the normalized earlier date.\n  // In our example, 1584-02-01 is earlier than 1584-12-10, so the difference\n  // is partial, hence we need to subtract 1 from the difference 3 - 1 = 2.\n  const partial = compareAsc(laterDate_, earlierDate_) === -sign;\n\n  const result = sign * (diff - +partial);\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInYears;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfSecond} function options.\n */\n\n/**\n * @name startOfSecond\n * @category Second Helpers\n * @summary Return the start of a second for the given date.\n *\n * @description\n * Return the start of a second for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a second\n *\n * @example\n * // The start of a second for 1 December 2014 22:15:45.400:\n * const result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.000\n */\nexport function startOfSecond(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setMilliseconds(0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfSecond;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfMinute} function options.\n */\n\n/**\n * @name startOfMinute\n * @category Minute Helpers\n * @summary Return the start of a minute for the given date.\n *\n * @description\n * Return the start of a minute for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a minute\n *\n * @example\n * // The start of a minute for 1 December 2014 22:15:45.400:\n * const result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:00\n */\nexport function startOfMinute(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setSeconds(0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfMinute;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfHour} function options.\n */\n\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an hour\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\nexport function startOfHour(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setMinutes(0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfHour;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfMonth} function options.\n */\n\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date. The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments.\n * Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed,\n * or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a month\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setDate(1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfMonth;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfQuarter} function options.\n */\n\n/**\n * @name startOfQuarter\n * @category Quarter Helpers\n * @summary Return the start of a year quarter for the given date.\n *\n * @description\n * Return the start of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a quarter\n *\n * @example\n * // The start of a quarter for 2 September 2014 11:55:00:\n * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Jul 01 2014 00:00:00\n */\nexport function startOfQuarter(date, options) {\n  const _date = toDate(date, options?.in);\n  const currentMonth = _date.getMonth();\n  const month = currentMonth - (currentMonth % 3);\n  _date.setMonth(month, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfQuarter;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfSecond} function options.\n */\n\n/**\n * @name endOfSecond\n * @category Second Helpers\n * @summary Return the end of a second for the given date.\n *\n * @description\n * Return the end of a second for the given date.\n * The result will be in the local timezone if no `in` option is specified.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a second\n *\n * @example\n * // The end of a second for 1 December 2014 22:15:45.400:\n * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:45.999\n */\nexport function endOfSecond(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setMilliseconds(999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfSecond;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfMinute} function options.\n */\n\n/**\n * @name endOfMinute\n * @category Minute Helpers\n * @summary Return the end of a minute for the given date.\n *\n * @description\n * Return the end of a minute for the given date.\n * The result will be in the local timezone or the provided context.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a minute\n *\n * @example\n * // The end of a minute for 1 December 2014 22:15:45.400:\n * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:59.999\n */\nexport function endOfMinute(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setSeconds(59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMinute;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfHour} function options.\n */\n\n/**\n * @name endOfHour\n * @category Hour Helpers\n * @summary Return the end of an hour for the given date.\n *\n * @description\n * Return the end of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of an hour\n *\n * @example\n * // The end of an hour for 2 September 2014 11:55:00:\n * const result = endOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:59:59.999\n */\nexport function endOfHour(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setMinutes(59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfHour;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfWeek} function options.\n */\n\n/**\n * @name endOfWeek\n * @category Week Helpers\n * @summary Return the end of a week for the given date.\n *\n * @description\n * Return the end of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a week\n *\n * @example\n * // The end of a week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sat Sep 06 2014 23:59:59.999\n *\n * @example\n * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:\n * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 23:59:59.999\n */\nexport function endOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\n\n  _date.setDate(_date.getDate() + diff);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfWeek;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfQuarter} function options.\n */\n\n/**\n * @name endOfQuarter\n * @category Quarter Helpers\n * @summary Return the end of a year quarter for the given date.\n *\n * @description\n * Return the end of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a quarter\n *\n * @example\n * // The end of a quarter for 2 September 2014 11:55:00:\n * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfQuarter(date, options) {\n  const _date = toDate(date, options?.in);\n  const currentMonth = _date.getMonth();\n  const month = currentMonth - (currentMonth % 3) + 3;\n  _date.setMonth(month, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfQuarter;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfYear} function options.\n */\n\n/**\n * @name endOfYear\n * @category Year Helpers\n * @summary Return the end of a year for the given date.\n *\n * @description\n * Return the end of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The end of a year\n *\n * @example\n * // The end of a year for 2 September 2014 11:55:00:\n * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Wed Dec 31 2014 23:59:59.999\n */\nexport function endOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n  _date.setFullYear(year + 1, 0, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfYear;\n","/*!\n * chartjs-adapter-date-fns v3.0.0\n * https://www.chartjs.org\n * (c) 2022 chartjs-adapter-date-fns Contributors\n * Released under the MIT license\n */\nimport { _adapters } from 'chart.js';\nimport { toDate, parse, parseISO, isValid, format, addYears, addQuarters, addMonths, addWeeks, addDays, addHours, addMinutes, addSeconds, addMilliseconds, differenceInYears, differenceInQuarters, differenceInMonths, differenceInWeeks, differenceInDays, differenceInHours, differenceInMinutes, differenceInSeconds, differenceInMilliseconds, startOfYear, startOfQuarter, startOfMonth, startOfWeek, startOfDay, startOfHour, startOfMinute, startOfSecond, endOfYear, endOfQuarter, endOfMonth, endOfWeek, endOfDay, endOfHour, endOfMinute, endOfSecond } from 'date-fns';\n\nconst FORMATS = {\n  datetime: 'MMM d, yyyy, h:mm:ss aaaa',\n  millisecond: 'h:mm:ss.SSS aaaa',\n  second: 'h:mm:ss aaaa',\n  minute: 'h:mm aaaa',\n  hour: 'ha',\n  day: 'MMM d',\n  week: 'PP',\n  month: 'MMM yyyy',\n  quarter: 'qqq - yyyy',\n  year: 'yyyy'\n};\n\n_adapters._date.override({\n  _id: 'date-fns', // DEBUG\n\n  formats: function() {\n    return FORMATS;\n  },\n\n  parse: function(value, fmt) {\n    if (value === null || typeof value === 'undefined') {\n      return null;\n    }\n    const type = typeof value;\n    if (type === 'number' || value instanceof Date) {\n      value = toDate(value);\n    } else if (type === 'string') {\n      if (typeof fmt === 'string') {\n        value = parse(value, fmt, new Date(), this.options);\n      } else {\n        value = parseISO(value, this.options);\n      }\n    }\n    return isValid(value) ? value.getTime() : null;\n  },\n\n  format: function(time, fmt) {\n    return format(time, fmt, this.options);\n  },\n\n  add: function(time, amount, unit) {\n    switch (unit) {\n    case 'millisecond': return addMilliseconds(time, amount);\n    case 'second': return addSeconds(time, amount);\n    case 'minute': return addMinutes(time, amount);\n    case 'hour': return addHours(time, amount);\n    case 'day': return addDays(time, amount);\n    case 'week': return addWeeks(time, amount);\n    case 'month': return addMonths(time, amount);\n    case 'quarter': return addQuarters(time, amount);\n    case 'year': return addYears(time, amount);\n    default: return time;\n    }\n  },\n\n  diff: function(max, min, unit) {\n    switch (unit) {\n    case 'millisecond': return differenceInMilliseconds(max, min);\n    case 'second': return differenceInSeconds(max, min);\n    case 'minute': return differenceInMinutes(max, min);\n    case 'hour': return differenceInHours(max, min);\n    case 'day': return differenceInDays(max, min);\n    case 'week': return differenceInWeeks(max, min);\n    case 'month': return differenceInMonths(max, min);\n    case 'quarter': return differenceInQuarters(max, min);\n    case 'year': return differenceInYears(max, min);\n    default: return 0;\n    }\n  },\n\n  startOf: function(time, unit, weekday) {\n    switch (unit) {\n    case 'second': return startOfSecond(time);\n    case 'minute': return startOfMinute(time);\n    case 'hour': return startOfHour(time);\n    case 'day': return startOfDay(time);\n    case 'week': return startOfWeek(time);\n    case 'isoWeek': return startOfWeek(time, {weekStartsOn: +weekday});\n    case 'month': return startOfMonth(time);\n    case 'quarter': return startOfQuarter(time);\n    case 'year': return startOfYear(time);\n    default: return time;\n    }\n  },\n\n  endOf: function(time, unit) {\n    switch (unit) {\n    case 'second': return endOfSecond(time);\n    case 'minute': return endOfMinute(time);\n    case 'hour': return endOfHour(time);\n    case 'day': return endOfDay(time);\n    case 'week': return endOfWeek(time);\n    case 'month': return endOfMonth(time);\n    case 'quarter': return endOfQuarter(time);\n    case 'year': return endOfYear(time);\n    default: return time;\n    }\n  }\n});\n","import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS<TType, TData, TLabel> | null>(null);\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"],"names":["dateLongFormatter","pattern","formatLong","date","width","timeLongFormatter","time","longFormatters","p","P","dateTimeLongFormatter","matchResult","match","datePattern","timePattern","dateTimeFormat","dateTime","replace","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isProtectedDayOfYearToken","token","test","isProtectedWeekYearToken","warnOrThrowProtectedError","format","input","_message","message","subject","toLowerCase","console","warn","includes","RangeError","getDefaultOptions","Object","assign","getInternalDefaultOptions","transpose","constructor","date_","isConstructor","prototype","constructFrom","setFullYear","getFullYear","getMonth","getDate","setHours","getHours","getMinutes","getSeconds","getMilliseconds","Setter","subPriority","validate","_utcDate","_options","ValueSetter","value","validateValue","setValue","priority","super","this","options","set","flags","DateTimezoneSetter","context","reference","timestampIsSet","Parser","run","dateString","result","parse","setter","rest","_value","numericPatterns","timezonePatterns","mapValue","parseFnResult","mapFn","parseNumericPattern","parseInt","slice","length","parseTimezonePattern","sign","hours","minutes","seconds","millisecondsInHour","millisecondsInMinute","millisecondsInSecond","parseAnyDigitsSigned","parseNDigits","n","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","dayPeriod","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","Math","trunc","isLeapYearIndex","year","startOfWeek","defaultOptions","weekStartsOn","locale","_date","toDate","in","day","getDay","diff","setDate","getWeekYear","firstWeekContainsDate","firstWeekOfNextYear","startOfNextYear","firstWeekOfThisYear","startOfThisYear","startOfISOWeek","startOfWeekYear","firstWeek","getWeek","round","millisecondsInWeek","setWeek","week","getISOWeekYear","fourthOfJanuaryOfNextYear","fourthOfJanuaryOfThisYear","getTime","startOfISOWeekYear","fourthOfJanuary","getISOWeek","setISOWeek","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","addDays","amount","isNaN","NaN","setDay","currentDay","delta","getISODay","setISODay","parsers","G","EraParser","era","incompatibleTokens","y","YearParser","valueCallback","isTwoDigitYear","ordinalNumber","unit","normalizedTwoDigitYear","Y","LocalWeekYearParser","R","ISOWeekYearParser","_flags","firstWeekOfYear","u","ExtendedYearParser","Q","QuarterParser","quarter","setMonth","q","StandAloneQuarterParser","M","MonthParser","month","L","StandAloneMonthParser","w","LocalWeekParser","I","ISOWeekParser","d","DateParser","isLeapYear","D","DayOfYearParser","subpriority","E","DayParser","e","LocalDayParser","wholeWeekDays","floor","c","StandAloneLocalDayParser","i","ISODayParser","a","AMPMParser","b","AMPMMidnightParser","B","DayPeriodParser","h","Hour1to12Parser","isPM","H","Hour0to23Parser","K","Hour0To11Parser","k","Hour1To24Parser","m","MinuteParser","setMinutes","s","SecondParser","setSeconds","S","FractionOfSecondParser","pow","setMilliseconds","X","ISOTimezoneWithZParser","getTimezoneOffsetInMilliseconds","x","ISOTimezoneParser","t","TimestampSecondsParser","T","TimestampMillisecondsParser","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","notWhitespaceRegExp","unescapedLatinCharacterRegExp","dateStr","formatStr","referenceDate","invalidDate","defaultLocale","subFnOptions","setters","tokens","map","substring","firstCharacter","longFormatter","join","usedTokens","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","parser","Array","isArray","incompatibleToken","find","usedToken","fullToken","push","parseResult","indexOf","uniquePrioritySetters","sort","filter","index","array","setterArray","parseISO","argument","additionalDigits","dateStrings","splitDateString","split","patterns","dateTimeDelimiter","timeString","timeZoneDelimiter","substr","timezone","exec","parseYearResult","parseYear","regex","captures","restDateString","century","parseDate","Date","dateRegex","isWeekDate","dayOfYear","parseDateUnit","dayOfWeek","validateWeekDate","_year","dayOfISOWeekYear","isoWeekYear","setUTCFullYear","fourthOfJanuaryDay","getUTCDay","setUTCDate","getUTCDate","validateDate","daysInMonths","validateDayOfYearDate","max","timestamp","offset","parseTime","timeRegex","parseTimeUnit","validateTime","tmpDate","getUTCFullYear","getUTCMonth","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseTimezone","timezoneString","timezoneRegex","validateTimezone","_hours","parseFloat","isDate","toString","call","isValid","startOfDay","differenceInCalendarDays","laterDate","earlierDate","laterDate_","earlierDate_","normalizeDates","laterStartOfDay","earlierStartOfDay","laterTimestamp","earlierTimestamp","millisecondsInDay","startOfYear","getDayOfYear","addLeadingZeros","number","targetLength","abs","padStart","lightFormatters","signedYear","String","dayPeriodEnumValue","toUpperCase","numberOfDigits","milliseconds","dayPeriodEnum","formatters","localize","signedWeekYear","weekYear","ceil","isoWeek","localDayOfWeek","isoDayOfWeek","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","O","formatTimezoneShort","z","delimiter","arguments","undefined","absOffset","originalDate","parts","isToken","cleanEscapedString","preprocessor","formatterOptions","part","formatter","matched","addMilliseconds","addSeconds","addMinutes","setTime","addHours","addWeeks","addMonths","dayOfMonth","endOfDesiredMonth","addQuarters","addYears","differenceInMinutes","dateLeft","dateRight","differenceInMilliseconds","getRoundingMethod","roundingMethod","differenceInHours","differenceInDays","compareLocalAsc","difference","Number","differenceInWeeks","differenceInQuarters","differenceInMonths","differenceInCalendarYears","differenceInYears","compareAsc","startOfSecond","startOfMinute","startOfHour","startOfMonth","startOfQuarter","currentMonth","endOfSecond","endOfMinute","endOfHour","endOfWeek","endOfQuarter","endOfYear","FORMATS","datetime","millisecond","second","minute","hour","_adapters","override","_id","formats","fmt","type","add","min","differenceInSeconds","startOf","weekday","endOf","endOfDay","endOfMonth","defaultDatasetIdKey","reforwardRef","ref","current","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","datasets","nextDataset","currentDataset","dataset","data","cloneData","nextData","getDatasetAtEvent","chart","event","getElementsAtEventForMode","nativeEvent","intersect","getElementAtEvent","getElementsAtEvent","ChartComponent","props","height","redraw","plugins","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","Chart$1","destroyChart","destroy","useEffect","setOptions","nextOptions","config","setTimeout","update","React","role","Chart","forwardRef","createTypedChart","registerables","register","Line","LineController","Bar","BarController","Radar","RadarController","Doughnut","DoughnutController","PolarArea","PolarAreaController","Bubble","BubbleController","Pie","PieController","Scatter","ScatterController"],"sourceRoot":""}